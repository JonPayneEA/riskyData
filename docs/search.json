[{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Containers.html","id":"containers-in-riskydata","dir":"Articles","previous_headings":"","what":"Containers in riskyData","title":"riskyData-Containers","text":"seen previous vignette riskyData-Welcome might recognised data pulled API aren’t conventional format. data scraped using loadAPI() function , gauge metadata also pulled simultaneously. Using bewdley dataset can investigate; dataset printed 2 sections: private public. grouped container called bewdley, class HydroImport R6. Using R6 allows define private fields methods, addition public ones. private means fields methods can accessed within class, outside. Whereas public, can interact modify fields. R6 implemention encapsulated object-oriented programming R, simpler, faster, lighter-weight alternative R's built-reference classes. style programming also sometimes referred classical object-oriented programming. features R6: R6 objects reference semantics. R6 cleanly supports inheritance across packages. R6 classes public private members. contrast R's reference classes, R6 built S4 class system, require methods package. Unlike reference classes, R6 classes can cleanly inherited across different packages.Public data","code":"library(riskyData) data(bewdley) bewdley #>  #> ── Class: HydroImport ────────────────────────────────────────────────────────── #>  #> ── Metadata: ── #>  #> Data Type: Raw Import #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: NA #> Start: 2008-10-01 #> End: 2022-09-30 23:45:00 #> Time Step: 900 #> Observations: 490848 #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #> ── Observed data: ── #>  #>                    dateTime value quality qcode #>      1: 2008-10-01 00:00:00  26.3    Good  <NA> #>      2: 2008-10-01 00:15:00  26.6    Good  <NA> #>      3: 2008-10-01 00:30:00  26.5    Good  <NA> #>      4: 2008-10-01 00:45:00  26.6    Good  <NA> #>      5: 2008-10-01 01:00:00  26.4    Good  <NA> #>     ---                                         #> 490844: 2022-09-30 22:45:00  11.2    Good  <NA> #> 490845: 2022-09-30 23:00:00  11.2    Good  <NA> #> 490846: 2022-09-30 23:15:00  11.3    Good  <NA> #> 490847: 2022-09-30 23:30:00  11.2    Good  <NA> #> 490848: 2022-09-30 23:45:00  11.2    Good  <NA> #> For more details use the $methods() function, the format should be as #> `Object_name`$methods() class(bewdley) #> [1] \"HydroImport\" \"R6\""},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Containers.html","id":"public-members","dir":"Articles","previous_headings":"Containers in riskyData","what":"Public members","title":"riskyData-Containers","text":"Public members accessible outside class can used modified directly. call raw data riskyData can $data, add one level complexity normal data frame benefits outstrip negatives. call data bewdley dataset use; normal dataframe can interact functions outside riskyData package;","code":"bewdley$data #>                    dateTime value quality qcode #>      1: 2008-10-01 00:00:00  26.3    Good  <NA> #>      2: 2008-10-01 00:15:00  26.6    Good  <NA> #>      3: 2008-10-01 00:30:00  26.5    Good  <NA> #>      4: 2008-10-01 00:45:00  26.6    Good  <NA> #>      5: 2008-10-01 01:00:00  26.4    Good  <NA> #>     ---                                         #> 490844: 2022-09-30 22:45:00  11.2    Good  <NA> #> 490845: 2022-09-30 23:00:00  11.2    Good  <NA> #> 490846: 2022-09-30 23:15:00  11.3    Good  <NA> #> 490847: 2022-09-30 23:30:00  11.2    Good  <NA> #> 490848: 2022-09-30 23:45:00  11.2    Good  <NA> mean(bewdley$data$value, na.rm = TRUE) #> [1] 61.38127 max(bewdley$data$value, na.rm = TRUE) #> [1] 523 min(bewdley$data$value, na.rm = TRUE) #> [1] 7.61 with(bewdley$data, plot(x = dateTime, y = value, type = 'l'))"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Containers.html","id":"private-data","dir":"Articles","previous_headings":"Containers in riskyData","what":"Private data","title":"riskyData-Containers","text":"Private members accessible within class, encapsulated ensure data integrity. gauge metadata stored within private section, directly interact edit data. example let’s say wished change catchment area bewdley dataset data protected, ensures can used times dependent functions. one way interact private metadata functions built container.","code":"bewdley$start <- now() #> Error in bewdley$start <- now() : cannot add bindings to a locked environment"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Containers.html","id":"active-bindings","dir":"Articles","previous_headings":"Containers in riskyData","what":"Active Bindings","title":"riskyData-Containers","text":"Active bindings special methods allow compute values --fly accessing attribute.","code":""},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Containers.html","id":"container-functions","dir":"Articles","previous_headings":"Containers in riskyData","what":"Container functions","title":"riskyData-Containers","text":"Functions specific data stored within R6 containers called methods. use interact different manner normally R. can applied using $ operator, meaning don’t encapsulate object within parenthesis. find methods available use $methods() object name. example; Using methods inbuilt containers, can interact private metadata; details methods covered methods vignette.","code":"bewdley$methods() #> ┌ Methods ───────────────────────────────────────────────────────────────────────────────────┐ #> │ obj$data    →    Returns the raw data imported via the API                                 │ #> │ obj$rating    →    Returns the user imported rating details                                │ #> │ obj$meta()    →    Returns the metadata associated with the object                         │ #> │ obj$asVol()    →    Calculates the volume of water relative to the time step, see ?asVol   │ #> │ obj$hydroYearDay()    →    Calculates the hydrological year and day, see ?hydroYearDay     │ #> │ obj$rmVol()    →    Removes the volume column                                              │ #> │ obj$rmHY()    →    Removes the hydroYear column                                            │ #> │ obj$rmHYD()    →    Removes the hydroYearDay column                                        │ #> │ obj$summary()    →    Provides a quick summary of the raw data                             │ #> │ obj$coords()    →    Returns coordinates from the metadata                                 │ #> │ obj$nrfa()    →    Returns the NRFA data from the metadata                                 │ #> │ obj$dataAgg()    →    Aggregate data by, hour, day, month calendar year and hydroYear      │ #> │ obj$rollingAggs()    →    Uses user specified aggregation timings, see ?rollingAggs        │ #> │ obj$dayStats()    →    Daily statistics of flow, carried out on hydrological or calendar … │ #> │ obj$quality()    →    Provides a quick summary table of the data qualiity flags            │ #> │ obj$plot()    →    Create a plot of each year of data, by hydrological year                │ #> │ obj$window()    →    Extracts the subset of data observed between the times start and end  │ #> │ obj$rateFlow()    →    Converts stage into a rated flow using the specified rating table   │ #> │ obj$rateStage()    →    Converts flow into a rated stage using the specified rating table  │ #> └────────────────────────────────────────────────────────────────────────────────────────────┘ # Return NRFA details bewdley$nrfa() #>    WISKI codeNRFA                                             urlNRFA #> 1:  2001    54001 https://nrfa.ceh.ac.uk/data/station/info/54001.html  # Return gauge coordinate data bewdley$coords() #>    stationName WISKI Easting Northing Latitude Longitude #> 1:     Bewdley  2001  378235   276165 52.38307 -2.321186  # Return all the metadata bewdley$meta() #>      dataType modifications stationName    riverName WISKI RLOID stationGuide #> 1: Raw Import            NA     Bewdley River Severn  2001  2001           NA #>                                                  baseURL #> 1: http://environment.data.gov.uk/hydrology/id/measures/ #>                                                                                                                                 dataURL #> 1: 8820d897-a09e-4857-8095-5834fee6962f-flow-i-900-m3s-qualified/readings.json?_limit=2000000&mineq-date=2008-10-01&max-date=2022-10-01 #>                                                       measureURL idNRFA #> 1: 8820d897-a09e-4857-8095-5834fee6962f-flow-i-900-m3s-qualified  54001 #>                                                urlNRFA easting northing #> 1: https://nrfa.ceh.ac.uk/data/station/info/54001.html  378235   276165 #>    latitude longitude area parameter unitName #> 1: 52.38307 -2.321186 4325      Flow     m3/s #>                                                  unit datum boreholeDepth #> 1: http://qudt.org/1.1/vocab/unit#CubicMeterPerSecond    NA            NA #>    aquifer      start                 end timeStep timeZone records #> 1:      NA 2008-10-01 2022-09-30 23:45:00      900      GMT  490848"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Containers.html","id":"inherited-members","dir":"Articles","previous_headings":"Containers in riskyData","what":"Inherited Members","title":"riskyData-Containers","text":"Inherited members methods fields inherited parent class R6 class inherits another. data imported loadAPI() function, container used HydroImport. parent class. aggregation method applied, can fundamentally change data structure. reason child class developed called HydroAggs. functionality inherited HydroImport parent class, however methods amended ensure still work. generate HydroAggs dataset can use $dataAgg() function. calculate hourly maximum data bewdley dataset export class HydroAggs; Though quite lot changes hood output looks similar class HydroImport. public data different applied aggregation, private metadata start end times series differ. One key changes modifications line, containers used riskyData track changes made data, case indicates “hourly max” aggregation applied.","code":"bewdley$dataAgg(type = \"hourly\", method = \"max\") #>  #> ── Class: HydroAggs ──────────────────────────────────────────────────────────── #>  #> ── Private: ── #>  #> Data Type: Aggregated - hourly max #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: hourly max #> Start: 2008-10-01 0 #> End: 2022-09-30 23 #> Time Step: Hourly Unstable #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #> ── Public: ── #>  #>              dateTime hourlyMax #>      1:  2008-10-01 0      26.6 #>      2:  2008-10-01 1      26.4 #>      3:  2008-10-01 2      25.3 #>      4:  2008-10-01 3      24.0 #>      5:  2008-10-01 4      23.3 #>     ---                         #> 122708: 2022-09-30 19      10.8 #> 122709: 2022-09-30 20      10.8 #> 122710: 2022-09-30 21      11.1 #> 122711: 2022-09-30 22      11.2 #> 122712: 2022-09-30 23      11.3 #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Methods.html","id":"the-riskydata-approach","dir":"Articles","previous_headings":"","what":"The riskyData approach","title":"riskyData-Methods","text":"mentioned containers vignette, functions specific data stored riskyData R6 containers called methods. Interaction slightly different conventional methods R. can applied using $ operator, meaning don’t encapsulate object within parenthesis.","code":""},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Methods.html","id":"available-methods","dir":"Articles","previous_headings":"The riskyData approach","what":"Available methods","title":"riskyData-Methods","text":"data imported R via loadAPI() function, observed data metadata sit within HydroImport container. available can interrogate methods available data analytics. Interrogation easy, simply apply $methods() imported object. use bewdley example;","code":"data(bewdley) bewdley$methods() #> ┌ Methods ───────────────────────────────────────────────────────────────────────────────────┐ #> │ obj$data    →    Returns the raw data imported via the API                                 │ #> │ obj$rating    →    Returns the user imported rating details                                │ #> │ obj$meta()    →    Returns the metadata associated with the object                         │ #> │ obj$asVol()    →    Calculates the volume of water relative to the time step, see ?asVol   │ #> │ obj$hydroYearDay()    →    Calculates the hydrological year and day, see ?hydroYearDay     │ #> │ obj$rmVol()    →    Removes the volume column                                              │ #> │ obj$rmHY()    →    Removes the hydroYear column                                            │ #> │ obj$rmHYD()    →    Removes the hydroYearDay column                                        │ #> │ obj$summary()    →    Provides a quick summary of the raw data                             │ #> │ obj$coords()    →    Returns coordinates from the metadata                                 │ #> │ obj$nrfa()    →    Returns the NRFA data from the metadata                                 │ #> │ obj$dataAgg()    →    Aggregate data by, hour, day, month calendar year and hydroYear      │ #> │ obj$rollingAggs()    →    Uses user specified aggregation timings, see ?rollingAggs        │ #> │ obj$dayStats()    →    Daily statistics of flow, carried out on hydrological or calendar … │ #> │ obj$quality()    →    Provides a quick summary table of the data qualiity flags            │ #> │ obj$plot()    →    Create a plot of each year of data, by hydrological year                │ #> │ obj$window()    →    Extracts the subset of data observed between the times start and end  │ #> │ obj$rateFlow()    →    Converts stage into a rated flow using the specified rating table   │ #> │ obj$rateStage()    →    Converts flow into a rated stage using the specified rating table  │ #> └────────────────────────────────────────────────────────────────────────────────────────────┘"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Methods.html","id":"accessing-data","dir":"Articles","previous_headings":"The riskyData approach > Available methods","what":"Accessing data","title":"riskyData-Methods","text":"data imported API, stored public pot within container. data.table format. provide enhanced version data.frame allows carry incredibly fast data manipulations. Due large size datasets much computationally efficient use methods. call data use $data directly calling data using method (function) can drop parentheses. data available can differ gauge types, bewdley data case flow. can see differences look chesterton rain gauge dataset; can see rain gauge data extra columns. analytics dateTime value fields used, however worth checking need use extra parameters.","code":"bewdley$data #>                    dateTime value quality qcode #>      1: 2008-10-01 00:00:00  26.3    Good  <NA> #>      2: 2008-10-01 00:15:00  26.6    Good  <NA> #>      3: 2008-10-01 00:30:00  26.5    Good  <NA> #>      4: 2008-10-01 00:45:00  26.6    Good  <NA> #>      5: 2008-10-01 01:00:00  26.4    Good  <NA> #>     ---                                         #> 490844: 2022-09-30 22:45:00  11.2    Good  <NA> #> 490845: 2022-09-30 23:00:00  11.2    Good  <NA> #> 490846: 2022-09-30 23:15:00  11.3    Good  <NA> #> 490847: 2022-09-30 23:30:00  11.2    Good  <NA> #> 490848: 2022-09-30 23:45:00  11.2    Good  <NA> data(chesterton) chesterton$data #>                    dateTime value valid invalid missing completeness   quality #>      1: 2010-12-31 23:45:00   0.0     0       0       0   Incomplete Unchecked #>      2: 2011-01-01 00:00:00   0.0     0       0       0   Incomplete Unchecked #>      3: 2011-01-01 00:15:00   0.0     0       0       0   Incomplete Unchecked #>      4: 2011-01-01 00:30:00   0.0     0       0       0   Incomplete Unchecked #>      5: 2011-01-01 00:45:00   0.0     0       0       0   Incomplete Unchecked #>     ---                                                                        #> 411933: 2022-09-30 22:45:00   0.2     0       0     100   Incomplete Unchecked #> 411934: 2022-09-30 23:00:00   0.0     0       0     100   Incomplete Unchecked #> 411935: 2022-09-30 23:15:00   0.0     0       0     100   Incomplete Unchecked #> 411936: 2022-09-30 23:30:00   0.0     0       0     100   Incomplete Unchecked #> 411937: 2022-09-30 23:45:00   0.0     0       0     100   Incomplete Unchecked"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Methods.html","id":"basic-methods","dir":"Articles","previous_headings":"The riskyData approach > Available methods","what":"Basic methods","title":"riskyData-Methods","text":"Using $print() $summary() methods can give quick insight data . Print works slightly differently, containers inbuilt print function overules one base R. means don’t need run $print() can simply just return object name. quick snapshot data quality imported data use $quality()","code":"bewdley$summary() #> hydroLoad:  #>  Data Type: Raw Import #>  Station ID: 2001 #>  Start: 2008-10-01 #>  End: 2022-09-30 23:45:00 #>  Time Zone: GMT #>  Observations: 490848 #>  Parameter: Flow #>  Unit Type: m3/s #>  Unit: http://qudt.org/1.1/vocab/unit#CubicMeterPerSecond bewdley ## Works the same as bewdley$print() #>  #> ── Class: HydroImport ────────────────────────────────────────────────────────── #>  #> ── Metadata: ── #>  #> Data Type: Raw Import #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: NA #> Start: 2008-10-01 #> End: 2022-09-30 23:45:00 #> Time Step: 900 #> Observations: 490848 #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #> ── Observed data: ── #>  #>                    dateTime value quality qcode #>      1: 2008-10-01 00:00:00  26.3    Good  <NA> #>      2: 2008-10-01 00:15:00  26.6    Good  <NA> #>      3: 2008-10-01 00:30:00  26.5    Good  <NA> #>      4: 2008-10-01 00:45:00  26.6    Good  <NA> #>      5: 2008-10-01 01:00:00  26.4    Good  <NA> #>     ---                                         #> 490844: 2022-09-30 22:45:00  11.2    Good  <NA> #> 490845: 2022-09-30 23:00:00  11.2    Good  <NA> #> 490846: 2022-09-30 23:15:00  11.3    Good  <NA> #> 490847: 2022-09-30 23:30:00  11.2    Good  <NA> #> 490848: 2022-09-30 23:45:00  11.2    Good  <NA> #> For more details use the $methods() function, the format should be as #> `Object_name`$methods() chesterton$quality() #>      quality  count #> 1: Unchecked 164545 #> 2:      Good 191351 #> 3:   Missing   2406 #> 4:   Suspect  53635"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Methods.html","id":"accessing-the-metadata","dir":"Articles","previous_headings":"The riskyData approach > Available methods","what":"Accessing the metadata","title":"riskyData-Methods","text":"mentioned container vignette, can directly interact metadata. part strict data quality elements riskyData enforces. However, wish inspect available metadata imported dataset simply done $meta(). clarity table transposed setting transform = TRUE metadata functions include;","code":"bewdley$meta(transform = TRUE) #>               [,1]                                                                                                                                   #> dataType      \"Raw Import\"                                                                                                                           #> modifications NA                                                                                                                                     #> stationName   \"Bewdley\"                                                                                                                              #> riverName     \"River Severn\"                                                                                                                         #> WISKI         \"2001\"                                                                                                                                 #> RLOID         \"2001\"                                                                                                                                 #> stationGuide  NA                                                                                                                                     #> baseURL       \"http://environment.data.gov.uk/hydrology/id/measures/\"                                                                                #> dataURL       \"8820d897-a09e-4857-8095-5834fee6962f-flow-i-900-m3s-qualified/readings.json?_limit=2000000&mineq-date=2008-10-01&max-date=2022-10-01\" #> measureURL    \"8820d897-a09e-4857-8095-5834fee6962f-flow-i-900-m3s-qualified\"                                                                        #> idNRFA        \"54001\"                                                                                                                                #> urlNRFA       \"https://nrfa.ceh.ac.uk/data/station/info/54001.html\"                                                                                  #> easting       \"378235\"                                                                                                                               #> northing      \"276165\"                                                                                                                               #> latitude      \"52.38307\"                                                                                                                             #> longitude     \"-2.321186\"                                                                                                                            #> area          \"4325\"                                                                                                                                 #> parameter     \"Flow\"                                                                                                                                 #> unitName      \"m3/s\"                                                                                                                                 #> unit          \"http://qudt.org/1.1/vocab/unit#CubicMeterPerSecond\"                                                                                   #> datum         NA                                                                                                                                     #> boreholeDepth NA                                                                                                                                     #> aquifer       NA                                                                                                                                     #> start         \"2008-10-01\"                                                                                                                           #> end           \"2022-09-30 23:45:00\"                                                                                                                  #> timeStep      \"900\"                                                                                                                                  #> timeZone      \"GMT\"                                                                                                                                  #> records       \"490848\" ## Coordinates of gauges chesterton$coords() #>    stationName  WISKI Easting Northing Latitude Longitude #> 1:  Chesterton 164163  512830   294610 52.53766 -0.337867  ## NRFA details bewdley$nrfa() #>    WISKI codeNRFA                                             urlNRFA #> 1:  2001    54001 https://nrfa.ceh.ac.uk/data/station/info/54001.html"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Methods.html","id":"adding-to-the-public-data","dir":"Articles","previous_headings":"The riskyData approach > Available methods","what":"Adding to the public data","title":"riskyData-Methods","text":"Though add number extra elements public data, riskyData containers currently couple useful methods. wished convert flow volume us $asVol method; adds volume column data table. uses metadata derive suitable values based difference time observations. wished remove column use ``$rmVol(); useful method $hydroYearDay() generates 2 things; Hydrological year (defaults 1st October 30 September) Hydrological day Similarly remove columns can remove hydrological year $rmHY() hydrological day $rmHYD();","code":"bewdley$asVol() bewdley$rmVol() bewdley$hydroYearDay() #>   [36mℹ [39m Calculating hydrological year and day   [32m✔ [39m Calculating hydrological year and day  [38;5;249m[4.9s] [39m bewdley$data #>                    dateTime value quality qcode hydroYear hydroYearDay #>      1: 2008-10-01 00:00:00  26.3    Good  <NA>      2009            1 #>      2: 2008-10-01 00:15:00  26.6    Good  <NA>      2009            1 #>      3: 2008-10-01 00:30:00  26.5    Good  <NA>      2009            1 #>      4: 2008-10-01 00:45:00  26.6    Good  <NA>      2009            1 #>      5: 2008-10-01 01:00:00  26.4    Good  <NA>      2009            1 #>     ---                                                                #> 490844: 2022-09-30 22:45:00  11.2    Good  <NA>      2022          365 #> 490845: 2022-09-30 23:00:00  11.2    Good  <NA>      2022          365 #> 490846: 2022-09-30 23:15:00  11.3    Good  <NA>      2022          365 #> 490847: 2022-09-30 23:30:00  11.2    Good  <NA>      2022          365 #> 490848: 2022-09-30 23:45:00  11.2    Good  <NA>      2022          365 bewdley$rmHY() #>   [36mℹ [39m Removing hydroYear column   [32m✔ [39m Removing hydroYear column  [38;5;249m[13ms] [39m bewdley$rmHYD() #>   [36mℹ [39m Removing hydroYearDay column   [32m✔ [39m Removing hydroYearDay column  [38;5;249m[7ms] [39m"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Methods.html","id":"plotting-data","dir":"Articles","previous_headings":"The riskyData approach > Available methods","what":"Plotting data","title":"riskyData-Methods","text":"Currently containers support plotting one way….","code":"bewdley$hydroYearDay()$plot() #>   [36mℹ [39m Calculating hydrological year and day   [32m✔ [39m Calculating hydrological year and day  [38;5;249m[4.9s] [39m"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Ratings.html","id":"ratings-in-riskydata","dir":"Articles","previous_headings":"","what":"Ratings in riskyData","title":"riskyData-Ratings","text":"Stage discharge rating tables can added applied data HydroImport containers. Let’s download stage data; access rating use; can see imported data doesn’t yet rating. add one can use addRating() method. method four arguments need filled (C, , B, max). now displayed whenever call HydroImport container using $rating; apply rating stage data use rateFlow() method; set outputs HydroImport container, set full argument TRUE","code":"bewdleyStage <- loadAPI(ID = \"2001\",                         measure = \"level\",                         period = 900,                         type = \"instantaneous\",                         datapoints = \"range\",                         from = '2020-10-01 00:00',                          rtExt = TRUE) #>   [36mℹ [39m Compiling parameters for raw download   [32m✔ [39m Compiling parameters for raw download  [38;5;249m[295ms] [39m #>   [36mℹ [39m Downloading raw data   [32m✔ [39m Downloading raw data  [38;5;249m[4s] [39m #>   [36mℹ [39m Downloading extended realtime data   [32m✔ [39m Downloading extended realtime data  [38;5;249m[511ms] [39m #>   [36mℹ [39m Collating metadata   [32m✔ [39m Collating metadata  [38;5;249m[209ms] [39m #>   [36mℹ [39m Exporting data to HydroImport container   [32m✔ [39m Exporting data to HydroImport container  [38;5;249m[20ms] [39m #>  #>  [36m── [39m  [1mClass: HydroImport [22m  [36m────────────────────────────────────────────────────────── [39m #>  #> ──  [1m [1mMetadata: [1m [22m ── #>  #>  [1mData Type: [22m Raw Import #>  [1mStation name: [22m Bewdley #>  [1mWISKI ID: [22m 2001 #>  [1mData Type: [22m Level #>  [1mModifications: [22m NA #>  [1mStart: [22m 2020-10-01 #>  [1mEnd: [22m 2023-11-09 09:45:00 #>  [1mTime Step: [22m 900 #>  [1mObservations: [22m 108887 #>  [1mEasting: [22m 378235 #>  [1mNorthing: [22m 276165 #>  [1mLongitude: [22m -2.321186 #>  [1mLatitude: [22m 52.383072 #>  #> ──  [1m [1mObserved data: [1m [22m ── #>                    dateTime value   quality qcode #>      1: 2020-10-01 00:00:00 0.351      Good  <NA> #>      2: 2020-10-01 00:15:00 0.350      Good  <NA> #>      3: 2020-10-01 00:30:00 0.350      Good  <NA> #>      4: 2020-10-01 00:45:00 0.351      Good  <NA> #>      5: 2020-10-01 01:00:00 0.350      Good  <NA> #>     ---                                           #> 108883: 2023-11-09 08:45:00 2.197 Unchecked  <NA> #> 108884: 2023-11-09 09:00:00 2.194 Unchecked  <NA> #> 108885: 2023-11-09 09:15:00 2.192 Unchecked  <NA> #> 108886: 2023-11-09 09:30:00 2.194 Unchecked  <NA> #> 108887: 2023-11-09 09:45:00 2.188 Unchecked  <NA> #>  [1mFor more details use the $methods() function, the format should be as [22m #>  [1m`Object_name`$methods() [22m bewdleyStage$rating #> NULL bewdleyStage$addRating(C = c(43.3123, 43.3123, 47.6218, 0.000668, 0.000668),                        A = c(-0.171831, -0.171831, -0.117731, -8.604474, -8.604474),                        B = c(1.44155, 1.44155, 1.38813, 5.139, 5.139),                        max = c(0.359, 0.504, 5.23, 5.55, 999)                        ) bewdleyStage #>  #> ── Class: HydroImport ────────────────────────────────────────────────────────── #>  #> ── Metadata: ── #>  #> Data Type: Raw Import #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Level #> Modifications: NA #> Start: 2020-10-01 #> End: 2023-11-09 09:45:00 #> Time Step: 900 #> Observations: 108887 #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #> ── Observed data: ── #>  #>                    dateTime value   quality qcode #>      1: 2020-10-01 00:00:00 0.351      Good  <NA> #>      2: 2020-10-01 00:15:00 0.350      Good  <NA> #>      3: 2020-10-01 00:30:00 0.350      Good  <NA> #>      4: 2020-10-01 00:45:00 0.351      Good  <NA> #>      5: 2020-10-01 01:00:00 0.350      Good  <NA> #>     ---                                           #> 108883: 2023-11-09 08:45:00 2.197 Unchecked  <NA> #> 108884: 2023-11-09 09:00:00 2.194 Unchecked  <NA> #> 108885: 2023-11-09 09:15:00 2.192 Unchecked  <NA> #> 108886: 2023-11-09 09:30:00 2.194 Unchecked  <NA> #> 108887: 2023-11-09 09:45:00 2.188 Unchecked  <NA> #> ── Rating data: ── #>  #>            C         A       B     max      maxFlow #> 1: 43.312300 -0.171831 1.44155   0.359 1.738289e+01 #> 2: 43.312300 -0.171831 1.44155   0.504 2.462149e+01 #> 3: 47.621800 -0.117731 1.38813   5.230 4.882023e+02 #> 4:  0.000668 -8.604474 5.13900   5.550 5.485540e+02 #> 5:  0.000668 -8.604474 5.13900 999.000 1.814196e+12 #> For more details use the $methods() function, the format should be as #> `Object_name`$methods() bewdleyStage$rateFlow() #>         stage      flow limb #>      1: 0.351  17.00650    1 #>      2: 0.350  16.95963    1 #>      3: 0.350  16.95963    1 #>      4: 0.351  17.00650    1 #>      5: 0.350  16.95963    1 #>     ---                      #> 108883: 2.197 152.67922    3 #> 108884: 2.194 152.40460    3 #> 108885: 2.192 152.22161    3 #> 108886: 2.194 152.40460    3 #> 108887: 2.188 151.85579    3 bewdleyStage$rateFlow(full = TRUE) #>  #> ── Class: HydroImport ────────────────────────────────────────────────────────── #>  #> ── Metadata: ── #>  #> Data Type: Rated flow based on stage/discharge rating #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: Rated flow calculated #> Start: 2020-10-01 #> End: 2023-11-09 09:45:00 #> Time Step: #> Observations: 108887 #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #> ── Observed data: ── #>  #>                    dateTime value   quality qcode #>      1: 2020-10-01 00:00:00 0.351      Good  <NA> #>      2: 2020-10-01 00:15:00 0.350      Good  <NA> #>      3: 2020-10-01 00:30:00 0.350      Good  <NA> #>      4: 2020-10-01 00:45:00 0.351      Good  <NA> #>      5: 2020-10-01 01:00:00 0.350      Good  <NA> #>     ---                                           #> 108883: 2023-11-09 08:45:00 2.197 Unchecked  <NA> #> 108884: 2023-11-09 09:00:00 2.194 Unchecked  <NA> #> 108885: 2023-11-09 09:15:00 2.192 Unchecked  <NA> #> 108886: 2023-11-09 09:30:00 2.194 Unchecked  <NA> #> 108887: 2023-11-09 09:45:00 2.188 Unchecked  <NA> #> ── Rating data: ── #>  #>            C         A       B     max      maxFlow #> 1: 43.312300 -0.171831 1.44155   0.359 1.738289e+01 #> 2: 43.312300 -0.171831 1.44155   0.504 2.462149e+01 #> 3: 47.621800 -0.117731 1.38813   5.230 4.882023e+02 #> 4:  0.000668 -8.604474 5.13900   5.550 5.485540e+02 #> 5:  0.000668 -8.604474 5.13900 999.000 1.814196e+12 #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Ratings.html","id":"rated-stage","dir":"Articles","previous_headings":"","what":"Rated stage","title":"riskyData-Ratings","text":"can also use ratings convert flow stage; can compare previously imported stage data.","code":"## Load flow data data(\"bewdley\")  ## Set a window to make data comparable bewdley$window(start = \"2020-10-01 00:00\", end = \"2022-10-01 00:00\", export = \"snip\") bewdleyStage$window(start = \"2020-10-01 00:00\", end = \"2022-09-30 23:45:00\", export = \"snip\")  ## Add the ratingg to bewdley bewdley$addRating(C = c(43.3123, 43.3123, 47.6218, 0.000668, 0.000668),                   A = c(-0.171831, -0.171831, -0.117731, -8.604474, -8.604474),                   B = c(1.44155, 1.44155, 1.38813, 5.139, 5.139),                   max = c(0.359, 0.504, 5.23, 5.55, 999)                   )  ## Calculate rated stage ratedStage <- bewdley$rateStage() ratedStage #>            stage flow limb #>     1: 0.3140213 15.3    1 #>     2: 0.3184182 15.5    1 #>     3: 0.3162219 15.4    1 #>     4: 0.3162219 15.4    1 #>     5: 0.3162219 15.4    1 #>    ---                     #> 70076: 0.2194841 11.2    1 #> 70077: 0.2194841 11.2    1 #> 70078: 0.2219045 11.3    1 #> 70079: 0.2194841 11.2    1 #> 70080: 0.2194841 11.2    1"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Realtime.html","id":"connecting-to-realtime-data","dir":"Articles","previous_headings":"","what":"Connecting to realtime data","title":"riskyData-Realtime data","text":"connecting Hydrology Data Explorer, data updated set intervals. can result data gap month. wish pad data, can connect real time flood data API. can done loadAPI() function adding argument rtExt = TRUE.","code":"#>   [36mℹ [39m Compiling parameters for raw download   [32m✔ [39m Compiling parameters for raw download  [38;5;249m[239ms] [39m #>   [36mℹ [39m Downloading raw data   [32m✔ [39m Downloading raw data  [38;5;249m[1.6s] [39m #>   [36mℹ [39m Downloading extended realtime data   [32m✔ [39m Downloading extended realtime data  [38;5;249m[1.6s] [39m #>   [36mℹ [39m Collating metadata   [32m✔ [39m Collating metadata  [38;5;249m[196ms] [39m #>   [36mℹ [39m Exporting data to HydroImport container   [32m✔ [39m Exporting data to HydroImport container  [38;5;249m[22ms] [39m plot(bewdF$data$dateTime, bewdF$data$value, type = 'l', main = 'Flow data for Bewdley', xlab = 'Date Time', ylab = 'Flow (m3 s-1)', lwd = 2) abline(v = bewdF$data$dateTime[36232], col = 'red', lwd = 2)"},{"path":[]},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Welcome.html","id":"welcome-to-riskydata","dir":"Articles","previous_headings":"Introduction to data importing","what":"Welcome to riskyData!","title":"riskyData-Welcome","text":"package riskyData developed Evidence Risk colleagues cleanly reliably import data Environment Agencies API.","code":""},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Welcome.html","id":"loading-the-package","dir":"Articles","previous_headings":"Introduction to data importing","what":"Loading the package","title":"riskyData-Welcome","text":"riskyData package part group tools called flode. load packages, easiest way use; However, require just riskyData package can just use;","code":"library(flode) library(riskyData)"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Welcome.html","id":"example-i---list-all-sites-in-api","dir":"Articles","previous_headings":"Introduction to data importing","what":"Example I - List all sites in API","title":"riskyData-Welcome","text":"loadAPI() function forms basis riskyData. operations relate manner . Running code parameters ID = NULL ID = \"\" return station list just limited WISKI sites, water quality data also present. functionality expanded upon future versions. Note can take time load wish constrain data NRFA WISKI sites add “nrfa” “wiski” ID argument. ’s also additional API function can connect contains real time data, real time data use “flood” tidal sites use “tidal”. Using obsProperty argument can filter results certain types gauges. limited ; Available datapoint options load data can also use; wished load flow sites WISKI data available can use; wished load sites used within National River Flow Archive (NRFA); view sites realtime data available use; Finally tidal sites use;","code":"loadAPI() #>        wiskiID                       label      riverName observedProperty #>     1: 037048U             Ulting Sarasota  River Chelmer        waterFlow #>     2:  510810              Beggearn Huish Washford River       waterLevel #>     3:  510810              Beggearn Huish Washford River        waterFlow #>     4:   F0803                      Adwick   River Dearne       waterLevel #>     5:   F0803                      Adwick   River Dearne        waterFlow #>    ---                                                                     #> 16854:    <NA> REDE_FOREST BRIDGE_E_202310     RIVER REDE     conductivity #> 16855:    <NA> REDE_FOREST BRIDGE_E_202310     RIVER REDE             fdom #> 16856:    <NA> REDE_FOREST BRIDGE_E_202310     RIVER REDE               ph #> 16857:    <NA> REDE_FOREST BRIDGE_E_202310     RIVER REDE      temperature #> 16858:    <NA> REDE_FOREST BRIDGE_E_202310     RIVER REDE        turbidity #>        easting northing      lat      long dateOpened catchmentArea #>     1:  581271   208591 51.74668  0.624437 2008-10-31            NA #>     2:  304007   139460 51.14632 -3.373695 1967-01-01          36.3 #>     3:  304007   139460 51.14632 -3.373695 1967-01-01          36.3 #>     4:  447677   402022 53.51271 -1.282505 1956-10-29         311.0 #>     5:  447677   402022 53.51271 -1.282505 1956-10-29         311.0 #>    ---                                                              #> 16854:  378502   600309 55.29640 -2.340101 2023-10-30            NA #> 16855:  378502   600309 55.29640 -2.340101 2023-10-30            NA #> 16856:  378502   600309 55.29640 -2.340101 2023-10-30            NA #> 16857:  378502   600309 55.29640 -2.340101 2023-10-30            NA #> 16858:  378502   600309 55.29640 -2.340101 2023-10-30            NA #>        nrfaStationID #>     1:          <NA> #>     2:         51003 #>     3:         51003 #>     4:         27030 #>     5:         27030 #>    ---               #> 16854:          <NA> #> 16855:          <NA> #> 16856:          <NA> #> 16857:          <NA> #> 16858:          <NA> # Note code not run loadAPI(ID = \"all\") # does the same as loadAPI() loadAPI(ID = \"wiski\", obsProperty = \"waterFlow\") #>       wiskiID                label        riverName observedProperty easting #>   1:  037048U      Ulting Sarasota    River Chelmer        waterFlow  581271 #>   2:   510810       Beggearn Huish   Washford River        waterFlow  304007 #>   3:    F0803               Adwick     River Dearne        waterFlow  447677 #>   4:     2048         Wellesbourne       River Dene        waterFlow  427271 #>   5: SS90F011           Thorverton        River Exe        waterFlow  293602 #>  ---                                                                         #> 941:   033062         Fowlmere No2    Guilden Brook        waterFlow  540309 #> 942:     2052 Ternhill (Bailey Bk)     Bailey Brook        waterFlow  362855 #> 943:     2044      Ternhill (Tern)       River Tern        waterFlow  362855 #> 944:   U33026    Offord Ultrasonic River Great Ouse        waterFlow  521278 #> 945:   720210        Calder Bridge     River Calder        waterFlow  349786 #>      northing      lat      long dateOpened catchmentArea nrfaStationID #>   1:   208591 51.74668  0.624437 2008-10-31            NA          <NA> #>   2:   139460 51.14632 -3.373695 1967-01-01          36.3         51003 #>   3:   402022 53.51271 -1.282505 1956-10-29         311.0         27030 #>   4:   255587 52.19784 -1.602416 1976-05-12         102.0         54048 #>   5:   101602 50.80417 -3.511302 1956-04-30         600.9         45001 #>  ---                                                                    #> 941:   245563 52.09063  0.046592 1964-11-01            NA         33062 #> 942:   331495 52.87962 -2.553380 1972-09-14          34.4         54052 #> 943:   331485 52.87953 -2.553379 1972-09-14          92.6         54044 #> 944:   265722 52.27627 -0.223832       <NA>        2553.0          <NA> #> 945:   443349 53.88387 -2.765383       <NA>            NA          <NA> loadAPI(ID = \"nrfa\") #>       wiskiID                label      riverName observedProperty easting #>    1:  510810       Beggearn Huish Washford River       waterLevel  304007 #>    2:  510810       Beggearn Huish Washford River        waterFlow  304007 #>    3:   F0803               Adwick   River Dearne       waterLevel  447677 #>    4:   F0803               Adwick   River Dearne        waterFlow  447677 #>    5:    2048         Wellesbourne     River Dene       waterLevel  427271 #>   ---                                                                      #> 1521:  034004       Costessey Mill   River Wensum        waterFlow  617682 #> 1522:  033061         Fowlmere No1     River Shep        waterFlow  540214 #> 1523:  033062         Fowlmere No2  Guilden Brook        waterFlow  540309 #> 1524:    2052 Ternhill (Bailey Bk)   Bailey Brook        waterFlow  362855 #> 1525:    2044      Ternhill (Tern)     River Tern        waterFlow  362855 #>       northing      lat      long dateOpened catchmentArea nrfaStationID #>    1:   139460 51.14632 -3.373695 1967-01-01          36.3         51003 #>    2:   139460 51.14632 -3.373695 1967-01-01          36.3         51003 #>    3:   402022 53.51271 -1.282505 1956-10-29         311.0         27030 #>    4:   402022 53.51271 -1.282505 1956-10-29         311.0         27030 #>    5:   255587 52.19784 -1.602416 1976-05-12         102.0         54048 #>   ---                                                                    #> 1521:   312740 52.66862  1.217973 1960-02-01         570.9         34004 #> 1522:   246000 52.09458  0.045386 1964-11-01            NA         33061 #> 1523:   245563 52.09063  0.046592 1964-11-01            NA         33062 #> 1524:   331495 52.87962 -2.553380 1972-09-14          34.4         54052 #> 1525:   331485 52.87953 -2.553379 1972-09-14          92.6         54044 loadAPI(ID = \"flood\") #>       stationReference   wiskiID                    label  parameter #>    1:           1029TH    1029TH          Bourton Dickler waterLevel #>    2:           1029TH    1029TH          Bourton Dickler waterLevel #>    3:            E2043    L31004          Surfleet Sluice waterLevel #>    4:            52119 520320_FW               Gaw Bridge waterLevel #>    5:           E21136    L33865               Hemingford waterLevel #>   ---                                                                #> 6032:           E71772  ST00F009     Cullompton Langlands       <NA> #> 6033:             5087      2544 Bromsgrove Burcot Avenue       <NA> #> 6034:             5088      2545  Bromsgrove Factory Lane       <NA> #> 6035:           E15252                          HAWLEY GS  waterFlow #> 6036:             E552                   EAST FARLEIGH GS  waterFlow #>       parameterName          riverName                           catchmentName #>    1:   Water Level       River Dikler                               Cotswolds #>    2:   Water Level       River Dikler                               Cotswolds #>    3:   Water Level         River Glen                                 Welland #>    4:   Water Level      River Parrett Parrett, Brue and West Somerset Streams #>    5:   Water Level   River Great Ouse                  Upper and Bedford Ouse #>   ---                                                                          #> 6032:          <NA>  Crow Green Stream                                     Exe #> 6033:          <NA> Spadesbourne Brook            Worcestershire Middle Severn #> 6034:          <NA> Spadesbourne Brook            Worcestershire Middle Severn #> 6035:          Flow               <NA>                                    <NA> #> 6036:          Flow               <NA>                                    <NA> #>       easting northing      lat      long gridReference dateOpened datumOffset #>    1:  417990   219610 51.87477 -1.740083          <NA> 1994-01-01          NA #>    2:  417990   219610 51.87477 -1.740083          <NA> 1994-01-01          NA #>    3:  528000   329300 52.84599 -0.100848          <NA> 1992-01-01         2.0 #>    4:  344383   119926 50.97604 -2.793549          <NA> 1997-01-01        10.0 #>    5:  529500   271200 52.32362 -0.101287  TL 2950 7120 1996-10-01         6.3 #>   ---                                                                          #> 6032:  301413   107348 50.85721 -3.402036          <NA> 2008-01-25          NA #> 6033:  396611   271641 52.34283 -2.051161  SO9661171641 2021-05-06          NA #> 6034:  395442   270367 52.33136 -2.068303  SO9544270367 2021-05-06          NA #> 6035:  555224   171841 51.42432  0.231228  TQ5522471841                     NA #> 6036:  573750   153750 51.25644  0.488613      TQ737537                     NA loadAPI(ID = \"tidal\") #>     stationReference              label  parameter parameterName riverName #>  1:           E70039          Lowestoft waterLevel   Water Level      Tide #>  2:           E70024          Lowestoft waterLevel   Water Level      <NA> #>  3:           E72639 Avonmouth Portbury waterLevel   Water Level      Tide #>  4:           E72624 Avonmouth Portbury waterLevel   Water Level      <NA> #>  5:           E71539          Sheerness waterLevel   Water Level      Tide #>  6:           E71524          Sheerness waterLevel   Water Level      <NA> #>  7:           E71939        Bournemouth waterLevel   Water Level      Tide #>  8:           E71924        Bournemouth waterLevel   Water Level      <NA> #>  9:           E71239             Cromer waterLevel   Water Level      Tide #> 10:           E71224             Cromer waterLevel   Water Level      <NA> #> 11:           E72039           Weymouth waterLevel   Water Level      Tide #> 12:           E72024           Weymouth waterLevel   Water Level      <NA> #> 13:           E71639              Dover waterLevel   Water Level      Tide #> 14:           E71624              Dover waterLevel   Water Level      <NA> #> 15:           E73439            Heysham waterLevel   Water Level      Tide #> 16:           E73424            Heysham waterLevel   Water Level      <NA> #> 17:           E72439         Ilfracombe waterLevel   Water Level      Tide #> 18:           E72424         Ilfracombe waterLevel   Water Level      <NA> #> 19:           E70939      North Shields waterLevel   Water Level      Tide #> 20:           E70924      North Shields waterLevel   Water Level      <NA> #> 21:           E73639         Workington waterLevel   Water Level      Tide #> 22:           E73624         Workington waterLevel   Water Level      <NA> #> 23:           E72139           Plymouth waterLevel   Water Level      Tide #> 24:           E72124           Plymouth waterLevel   Water Level      <NA> #> 25:           E71739           Newhaven waterLevel   Water Level      Tide #> 26:           E71724           Newhaven waterLevel   Water Level      <NA> #> 27:           E71039             Whitby waterLevel   Water Level      Tide #> 28:           E71024             Whitby waterLevel   Water Level      <NA> #> 29:           E70139          Liverpool waterLevel   Water Level      <NA> #> 30:           E70124          Liverpool waterLevel   Water Level      <NA> #> 31:           E72539      Hinkley Point waterLevel   Water Level      Tide #> 32:           E72524      Hinkley Point waterLevel   Water Level      <NA> #> 33:           E71439            Harwich waterLevel   Water Level      Tide #> 34:           E71424            Harwich waterLevel   Water Level      <NA> #> 35:           E72239             Newlyn waterLevel   Water Level      Tide #> 36:           E72224             Newlyn waterLevel   Water Level      <NA> #> 37:           E71839         Portsmouth waterLevel   Water Level      <NA> #> 38:           E71824         Portsmouth waterLevel   Water Level      <NA> #> 39:           E71139          Immingham waterLevel   Water Level      Tide #> 40:           E71124          Immingham waterLevel   Water Level      <NA> #> 41:           E72324           St Marys waterLevel   Water Level      <NA> #> 42:           E72339           St Marys waterLevel   Water Level      <NA> #> 43:           E73939           Portrush waterLevel   Water Level      <NA> #> 44:           E73924           Portrush waterLevel   Water Level      <NA> #> 45:           E70539           Holyhead waterLevel   Water Level      <NA> #> 46:           E70524           Holyhead waterLevel   Water Level      <NA> #> 47:           E73139          Fishguard waterLevel   Water Level      <NA> #> 48:           E73124          Fishguard waterLevel   Water Level      <NA> #> 49:           E70439           Ullapool waterLevel   Water Level      <NA> #> 50:           E70424           Ullapool waterLevel   Water Level      <NA> #> 51:           E70824              Leith waterLevel   Water Level      <NA> #> 52:           E70839              Leith waterLevel   Water Level      <NA> #> 53:           E72924            Mumbles waterLevel   Water Level      <NA> #> 54:           E72939            Mumbles waterLevel   Water Level      <NA> #> 55:           E72839            Newport waterLevel   Water Level      <NA> #> 56:           E72825            Newport waterLevel   Water Level      <NA> #> 57:           E72824            Newport waterLevel   Water Level      <NA> #> 58:           E70739           Aberdeen waterLevel   Water Level      <NA> #> 59:           E70724           Aberdeen waterLevel   Water Level      <NA> #> 60:           E73024      Milford Haven waterLevel   Water Level      <NA> #> 61:           E73039      Milford Haven waterLevel   Water Level      <NA> #> 62:           E74039           Millport waterLevel   Water Level      <NA> #> 63:           E74024           Millport waterLevel   Water Level      <NA> #> 64:           E73839             Bangor waterLevel   Water Level      <NA> #> 65:           E73824             Bangor waterLevel   Water Level      <NA> #> 66:           E70624               Wick waterLevel   Water Level      <NA> #> 67:           E70639               Wick waterLevel   Water Level      <NA> #> 68:           E73524          Port Erin waterLevel   Water Level      <NA> #> 69:           E73539          Port Erin waterLevel   Water Level      <NA> #> 70:           E70339      Kinlochbervie waterLevel   Water Level      <NA> #> 71:           E70324      Kinlochbervie waterLevel   Water Level      <NA> #> 72:           E74224          Tobermory waterLevel   Water Level      <NA> #> 73:           E74239          Tobermory waterLevel   Water Level      <NA> #> 74:           E73739        Portpatrick waterLevel   Water Level      <NA> #> 75:           E73724        Portpatrick waterLevel   Water Level      <NA> #> 76:           E74324          Stornoway waterLevel   Water Level      <NA> #> 77:           E74339          Stornoway waterLevel   Water Level      <NA> #> 78:           E70239             Jersey waterLevel   Water Level      <NA> #> 79:           E70224             Jersey waterLevel   Water Level      <NA> #> 80:           E73224           Barmouth waterLevel   Water Level      <NA> #> 81:           E73239           Barmouth waterLevel   Water Level      <NA> #> 82:           E74424            Lerwick waterLevel   Water Level      <NA> #> 83:           E74439            Lerwick waterLevel   Water Level      <NA> #> 84:           E73324          Llandudno waterLevel   Water Level      <NA> #> 85:           E73339          Llandudno waterLevel   Water Level      <NA> #> 86:           E72623 Avonmouth Portbury waterLevel   Water Level      <NA> #>     stationReference              label  parameter parameterName riverName #>             catchmentName easting northing      lat      long   gridReference #>  1:  England - East Coast  654780   292741 52.47308  1.750085    TM 5478 9274 #>  2:                  <NA>  654781   292745 52.47311  1.750110  TM 54781 92745 #>  3: England - South Coast  349530   178147 51.49999 -2.728468    ST 4953 7815 #>  4:                  <NA>  349530   178148 51.50000 -2.728470  ST 49530 78148 #>  5:  England - East Coast  590740   175419 51.44563  0.743415    TQ 9074 7542 #>  6:                  <NA>  590742   175420 51.44564  0.743440  TQ 90742 75420 #>  7: England - South Coast  408930    90530 50.71433 -1.874873    SZ 0893 9053 #>  8:                  <NA>  408931    90530 50.71433 -1.874860  SZ 08931 90530 #>  9:  England - East Coast  621979   342539 52.93432  1.301623    TG 2198 4254 #> 10:                  <NA>  621980   342544 52.93436  1.301640  TG 21980 42544 #> 11: England - South Coast  368399    78850 50.60850 -2.447945    SY 6840 7885 #> 12:                  <NA>  368399    78850 50.60850 -2.447940  SY 68399 78850 #> 13: England - South Coast  632650   140260 51.11437  1.322641    TR 3265 4026 #> 14:                  <NA>  632652   140262 51.11439  1.322670  TR 32652 40262 #> 15:  England - West Coast  339820   459928 54.03180 -2.920253    SD 3982 5993 #> 16:                  <NA>  339820   459932 54.03183 -2.920250  SD 39820 59932 #> 17: England - South Coast  252549   147891 51.21113 -4.112362    SS 5255 4789 #> 18:                  <NA>  252547   147892 51.21114 -4.112390  SS 52547 47892 #> 19:  England - East Coast  435929   568240 55.00742 -1.439769    NZ 3593 6824 #> 20:                  <NA>  435928   568243 55.00744 -1.439780  NZ 35928 68243 #> 21:  England - West Coast  298980   529529 54.65069 -3.567170    NX 9898 2953 #> 22:                  <NA>  298980   529532 54.65072 -3.567170  NX 98980 29532 #> 23: England - South Coast  244690    54339 50.36840 -4.185217    SX 4469 5434 #> 24:                  <NA>  244688    54338 50.36839 -4.185250  SX 44688 54338 #> 25: England - South Coast  545109   100039 50.78178  0.057004    TQ 4511 0004 #> 26:                  <NA>  545111   100040 50.78178  0.057030  TQ 45111 00040 #> 27:  England - East Coast  489840   511399 54.48997 -0.614597    NZ 8984 1140 #> 28:                  <NA>  489839   511403 54.49000 -0.614610  NZ 89839 11403 #> 29:                  <NA>  332490   395254 53.44969 -3.018000  SJ 32490 95254 #> 30:                  <NA>  332490   395254 53.44969 -3.018000  SJ 32490 95254 #> 31: England - South Coast  321070   146320 51.21061 -3.131326    ST 2107 4632 #> 32:                  <NA>  321093   146364 51.21100 -3.131000  ST 21093 46364 #> 33: England - South Coast  626340   232841 51.94798  1.292108    TM 2634 3284 #> 34:                  <NA>  626342   232843 51.94800  1.292140  TM 26342 32843 #> 35: England - South Coast  146759    28559 50.10301 -5.542779    SW 4676 2856 #> 36:                  <NA>  146743    28559 50.10300 -5.543000  SW 46743 28559 #> 37:                  <NA>  462731   100679 50.80228 -1.111170  SU 62731 00679 #> 38:                  <NA>  462731   100679 50.80228 -1.111170  SU 62731 00679 #> 39:  England - East Coast  519959   416378 53.63018 -0.187420    TA 1996 1638 #> 40:                  <NA>  519959   416382 53.63022 -0.187420  TA 19959 16382 #> 41:                  <NA>   90268    10966 49.91847 -6.316420  SV 90268 10966 #> 42:                  <NA>   90268    10966 49.91847 -6.316420  SV 90268 10966 #> 43:                  <NA>  103846   600180 55.20678 -6.656830  NR 03846 00180 #> 44:                  <NA>  103846   600180 55.20678 -6.656830  NR 03846 00180 #> 45:                  <NA>  225529   382871 53.31394 -4.620440  SH 25529 82871 #> 46:                  <NA>  225529   382871 53.31394 -4.620440  SH 25529 82871 #> 47:                  <NA>  195337   239182 52.01322 -4.983750  SM 95337 39182 #> 48:                  <NA>  195337   239182 52.01322 -4.983750  SM 95337 39182 #> 49:                  <NA>  212929   893910 57.89525 -5.157890  NH 12929 93910 #> 50:                  <NA>  212929   893910 57.89525 -5.157890  NH 12929 93910 #> 51:                  <NA>  326379   678062 55.98983 -3.181690  NT 26379 78062 #> 52:                  <NA>  326379   678062 55.98983 -3.181690  NT 26379 78062 #> 53:                  <NA>  263188   187531 51.57000 -3.975440  SS 63188 87531 #> 54:                  <NA>  263188   187531 51.57000 -3.975440  SS 63188 87531 #> 55:                  <NA>  331629   183920 51.55000 -2.987440  ST 31629 83920 #> 56:                  <NA>  331629   183920 51.55000 -2.987440  ST 31629 83920 #> 57:                  <NA>  331629   183920 51.55000 -2.987440  ST 31629 83920 #> 58:                  <NA>  395417   805913 57.14406 -2.077360  NJ 95417 05913 #> 59:                  <NA>  395417   805913 57.14406 -2.077360  NJ 95417 05913 #> 60:                  <NA>  189261   205371 51.70739 -5.051530  SM 89261 05371 #> 61:                  <NA>  189261   205371 51.70739 -5.051530  SM 89261 05371 #> 62:                  <NA>  217690   654544 55.74981 -4.906330  NS 17690 54544 #> 63:                  <NA>  217690   654544 55.74981 -4.906330  NS 17690 54544 #> 64:                  <NA>  163460   536151 54.66475 -5.669470  NW 63460 36151 #> 65:                  <NA>  163460   536151 54.66475 -5.669470  NW 63460 36151 #> 66:                  <NA>  336679   950811 58.44097 -3.086310  ND 36679 50811 #> 67:                  <NA>  336679   950811 58.44097 -3.086310  ND 36679 50811 #> 68:                  <NA>  219040   469043 54.08539 -4.768060  SC 19040 69043 #> 69:                  <NA>  219040   469043 54.08539 -4.768060  SC 19040 69043 #> 70:                  <NA>  222145   956079 58.45661 -5.050080  NC 22145 56079 #> 71:                  <NA>  222145   956079 58.45661 -5.050080  NC 22145 56079 #> 72:                  <NA>  150790   755309 56.62311 -6.064220  NM 50790 55309 #> 73:                  <NA>  150790   755309 56.62311 -6.064220  NM 50790 55309 #> 74:                  <NA>  199760   554214 54.84256 -5.120030  NW 99760 54214 #> 75:                  <NA>  199760   554214 54.84256 -5.120030  NW 99760 54214 #> 76:                  <NA>  142280   932739 58.20781 -6.388970  NB 42280 32739 #> 77:                  <NA>  142280   932739 58.20781 -6.388970  NB 42280 32739 #> 78:                  <NA>  391593   -79699 49.18333 -2.116670 SY 91593 -79699 #> 79:                  <NA>  391593   -79699 49.18333 -2.116670 SY 91593 -79699 #> 80:                  <NA>  261969   315483 52.71933 -4.045030  SH 61969 15483 #> 81:                  <NA>  261969   315483 52.71933 -4.045030  SH 61969 15483 #> 82:                  <NA>  447829  1141374 60.15403 -1.140310  HU 47829 41374 #> 83:                  <NA>  447829  1141374 60.15403 -1.140310  HU 47829 41374 #> 84:                  <NA>  278549   383195 53.33167 -3.825220  SH 78549 83195 #> 85:                  <NA>  278549   383195 53.33167 -3.825220  SH 78549 83195 #> 86:                  <NA>  349562   178148 51.50000 -2.728000  ST 49562 78148 #>             catchmentName easting northing      lat      long   gridReference #>     dateOpened #>  1: 2012-01-19 #>  2:       <NA> #>  3: 2012-02-24 #>  4:       <NA> #>  5: 2012-01-31 #>  6:       <NA> #>  7: 2011-10-01 #>  8:       <NA> #>  9: 2012-01-20 #> 10:       <NA> #> 11: 2011-09-30 #> 12:       <NA> #> 13: 2012-01-26 #> 14:       <NA> #> 15: 2011-12-02 #> 16:       <NA> #> 17: 2011-10-11 #> 18:       <NA> #> 19: 2012-01-13 #> 20:       <NA> #> 21: 2011-12-12 #> 22:       <NA> #> 23: 2011-10-11 #> 24:       <NA> #> 25: 2012-02-09 #> 26:       <NA> #> 27: 2012-05-02 #> 28:       <NA> #> 29:       <NA> #> 30:       <NA> #> 31: 2012-05-10 #> 32:       <NA> #> 33: 2012-02-13 #> 34:       <NA> #> 35: 2012-05-31 #> 36:       <NA> #> 37:       <NA> #> 38:       <NA> #> 39: 2012-02-03 #> 40:       <NA> #> 41:       <NA> #> 42:       <NA> #> 43:       <NA> #> 44:       <NA> #> 45:       <NA> #> 46:       <NA> #> 47:       <NA> #> 48:       <NA> #> 49:       <NA> #> 50:       <NA> #> 51:       <NA> #> 52:       <NA> #> 53:       <NA> #> 54:       <NA> #> 55:       <NA> #> 56:       <NA> #> 57:       <NA> #> 58:       <NA> #> 59:       <NA> #> 60:       <NA> #> 61:       <NA> #> 62:       <NA> #> 63:       <NA> #> 64:       <NA> #> 65:       <NA> #> 66:       <NA> #> 67:       <NA> #> 68:       <NA> #> 69:       <NA> #> 70:       <NA> #> 71:       <NA> #> 72:       <NA> #> 73:       <NA> #> 74:       <NA> #> 75:       <NA> #> 76:       <NA> #> 77:       <NA> #> 78:       <NA> #> 79:       <NA> #> 80:       <NA> #> 81:       <NA> #> 82:       <NA> #> 83:       <NA> #> 84:       <NA> #> 85:       <NA> #> 86:       <NA> #>     dateOpened"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Welcome.html","id":"example-ii---find-nearby-gauges","dir":"Articles","previous_headings":"Introduction to data importing","what":"Example II - Find nearby gauges","title":"riskyData-Welcome","text":"Assuming site interest wished see available nearby gauges. can search sites coordinates within certain range. Using following arguments can search api nearby data; easting, northing, lat, long, dist. easting northing coordinates 378235 276165 respectively wish find NRFA gauges within 30km; Alternatively, find groundwater data within 10km lat-long coordinates; 52.58302, -0.40656 Note function allow mix easting-northing lat-long. identified dataset interest, Bewdley, can inform API return available datasets assigned WISKI ID;","code":"loadAPI(easting = 378235 , northing = 276165, dist = 30, ID = \"nrfa\") #>     wiskiID        label      riverName observedProperty easting northing #>  1:    2001      Bewdley   River Severn       waterLevel  378235   276165 #>  2:    2001      Bewdley   River Severn        waterFlow  378235   276165 #>  3:    2034  Oak Cottage   Dowles Brook       waterLevel  377105   276425 #>  4:    2034  Oak Cottage   Dowles Brook        waterFlow  377105   276425 #>  5:    2063    Prestwood    River Stour        waterFlow  386705   286155 #>  6:    2193 Wards Bridge   Hadley Brook        waterFlow  387025   263145 #>  7:    2011 Harford Hill River Salwarpe       waterLevel  386865   261935 #>  8:    2011 Harford Hill River Salwarpe        waterFlow  386865   261935 #>  9:    2024      Burcote    River Worfe       waterLevel  374605   295345 #> 10:    2024      Burcote    River Worfe        waterFlow  374605   295345 #>          lat      long dateOpened catchmentArea nrfaStationID #>  1: 52.38307 -2.321186 1921-04-01        4325.0         54001 #>  2: 52.38307 -2.321186 1921-04-01        4325.0         54001 #>  3: 52.38536 -2.337805 1971-08-24          40.8         54034 #>  4: 52.38536 -2.337805 1971-08-24          40.8         54034 #>  5: 52.47315 -2.197148 1972-08-01          89.9         54063 #>  6: 52.26630 -2.191539 1987-12-10          53.0         54096 #>  7: 52.25542 -2.193836 1960-12-19         184.0         54011 #>  8: 52.25542 -2.193836 1960-12-19         184.0         54011 #>  9: 52.55534 -2.375983 1969-03-21         258.0         54024 #> 10: 52.55534 -2.375983 1969-03-21         258.0         54024 loadAPI(lat = 52.58302, long = -0.40656, dist = 100, obsProperty = \"groundwaterLevel\") #>      wiskiID                     label          riverName observedProperty #>   1:  U32610         Wansford Combined         River Nene        waterFlow #>   2:   8_913            Sutton Wetland               <NA> groundwaterLevel #>   3:   3_032  Sutton Top Field Spinney               <NA> groundwaterLevel #>   4:   3_034         Sutton Heath Road               <NA> groundwaterLevel #>   5:   3_004                   Barnack               <NA> groundwaterLevel #>  ---                                                                       #> 168:    <NA> EYE_FREEBY BROOK_E_202105 RIVER EYE (WREAKE) dissolved-oxygen #> 169:    <NA> EYE_FREEBY BROOK_E_202105 RIVER EYE (WREAKE)     conductivity #> 170:    <NA> EYE_FREEBY BROOK_E_202105 RIVER EYE (WREAKE)               ph #> 171:    <NA> EYE_FREEBY BROOK_E_202105 RIVER EYE (WREAKE)      temperature #> 172:    <NA> EYE_FREEBY BROOK_E_202105 RIVER EYE (WREAKE)        turbidity #>      easting northing      lat      long dateOpened catchmentArea nrfaStationID #>   1:  508060   299550 52.58302 -0.406558 1996-01-16            NA         32010 #>   2:  508845   300065 52.58749 -0.394808 1998-03-25            NA          <NA> #>   3:  509075   300045 52.58727 -0.391421 1998-03-25            NA          <NA> #>   4:  509035   300235 52.58898 -0.391949 1998-03-25            NA          <NA> #>   5:  507345   305125 52.63326 -0.415299 1971-04-23            NA          <NA> #>  ---                                                                            #> 168:  480916   319518 52.76720 -0.802170 2021-05-10            NA          <NA> #> 169:  480916   319518 52.76720 -0.802170 2021-05-10            NA          <NA> #> 170:  480916   319518 52.76720 -0.802170 2021-05-10            NA          <NA> #> 171:  480916   319518 52.76720 -0.802170 2021-05-10            NA          <NA> #> 172:  480916   319518 52.76720 -0.802170 2021-05-10            NA          <NA> loadAPI(easting=247613, lat = 50.5, long = -4.15, dist = 10, ID = \"nrfa\") #> Warning in loadAPI(easting = 247613, lat = 50.5, long = -4.15, dist = 10, : Conflicting coordinate systems, please use  lat-long OR #>                      easting-northing"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Welcome.html","id":"example-iii---known-wiski-id","dir":"Articles","previous_headings":"Introduction to data importing","what":"Example III - Known WISKI ID","title":"riskyData-Welcome","text":"Say wish see data available given site, case Bewdley (WISKI 2001) can now use WISKI ID ID argument loadAPI() can see 3 level 4 flow series available. 2 time steps periods available. Daily data 86400 seconds 15 minute 900 seconds. 15 minute data type “instantaneous” - data used flood models. flow stage daily minimum maximum values, flow also daily mean available. wish now drill instantaneous data bit .","code":"loadAPI(ID = '2001') #! It's good practice to input the ID as a character string #>    measure period          type #> 1:   level    900 instantaneous #> 2:   level  86400           min #> 3:    flow  86400          mean #> 4:    flow  86400           min #> 5:   level  86400           max #> 6:    flow    900 instantaneous #> 7:    flow  86400           max"},{"path":"https://jonpayneea.github.io/riskyData/articles/riskyData-Welcome.html","id":"example-iv---using-the-datapoints-argument","dir":"Articles","previous_headings":"Introduction to data importing","what":"Example IV - using the datapoints argument","title":"riskyData-Welcome","text":"datapoints argument gives us lot control wish pull API. Available datapoint options find first time step instantaneous series need include arguments; measure, period, type, datapoints . data exported HydroImport class, gauge metadata pulled simultaneously observed data. details classes can seen VIGNETTE XXXX latest can change text datapoints argument ‘latest’ Now say wished look specific day ‘2022-06-11’. change datapoints argument add one. also plot data ;  wished extend can use ‘range’ option datapoints. beginning end date, expressed arguments  pull data can use “” option. Note can take long time lot data!","code":"loadAPI(ID = '2001',          measure = 'flow',         period = 900,         type = 'instantaneous',         datapoints = 'earliest') #>  #> ── Class: HydroImport ────────────────────────────────────────────────────────── #>  #> ── Metadata: ── #>  #> Data Type: Raw Import #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: NA #> Start: 2008-10-01 #> End: 2008-10-01 #> Time Step: NA #> Observations: 1 #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #> ── Observed data: ── #>  #>      dateTime value quality qcode #> 1: 2008-10-01  26.3    Good  <NA> #> For more details use the $methods() function, the format should be as #> `Object_name`$methods() loadAPI(ID = '2001',          measure = 'flow',         period = 900,         type = 'instantaneous',         datapoints = 'latest') #>  #> ── Class: HydroImport ────────────────────────────────────────────────────────── #>  #> ── Metadata: ── #>  #> Data Type: Raw Import #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: NA #> Start: 2022-09-30 23:45:00 #> End: 2022-09-30 23:45:00 #> Time Step: NA #> Observations: 1 #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #> ── Observed data: ── #>  #>               dateTime value quality qcode #> 1: 2022-09-30 23:45:00  11.2    Good  <NA> #> For more details use the $methods() function, the format should be as #> `Object_name`$methods() dt <- loadAPI(ID = '2001',                measure = 'flow',               period = 900,               type = 'instantaneous',               datapoints = 'day',               from = '2022-06-11')  with(dt$data, plot(dateTime, value, type = 'l', xlab = \"Date Time\", ylab = \"Flow (cumecs)\")) dt <- loadAPI(ID = '2001',                measure = 'flow',               period = 900,               type = 'instantaneous',               datapoints = 'range',               from = '2019-10-01 00:00',               to = '2020-03-30 00:00')  with(dt$data, plot(dateTime, value, type = 'l', xlab = \"Date Time\", ylab = \"Flow (cumecs)\")) loadAPI(ID = '2001',          measure = 'level',         period = 900,         type = 'instantaneous',         datapoints = 'all') #>  #> ── Class: HydroImport ────────────────────────────────────────────────────────── #>  #> ── Metadata: ── #>  #> Data Type: Raw Import #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: NA #> Start: 2008-10-01 #> End: 2022-09-30 23:45:00 #> Time Step: 900 #> Observations: 490848 #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #> ── Observed data: ── #>  #>                    dateTime value quality qcode #>      1: 2008-10-01 00:00:00  26.3    Good  <NA> #>      2: 2008-10-01 00:15:00  26.6    Good  <NA> #>      3: 2008-10-01 00:30:00  26.5    Good  <NA> #>      4: 2008-10-01 00:45:00  26.6    Good  <NA> #>      5: 2008-10-01 01:00:00  26.4    Good  <NA> #>     ---                                         #> 490844: 2022-09-30 22:45:00  11.2    Good  <NA> #> 490845: 2022-09-30 23:00:00  11.2    Good  <NA> #> 490846: 2022-09-30 23:15:00  11.3    Good  <NA> #> 490847: 2022-09-30 23:30:00  11.2    Good  <NA> #> 490848: 2022-09-30 23:45:00  11.2    Good  <NA> #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()"},{"path":"https://jonpayneea.github.io/riskyData/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonathan Payne. Author, maintainer. Oliver Dyer. Author.","code":""},{"path":"https://jonpayneea.github.io/riskyData/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Payne J, Dyer O (2023). riskyData: Welcome riskyData tool pulling observed data EAs API. https://jonpayneea.github.io/riskyData/, https://github.com/JonPayneEA/riskyData.","code":"@Manual{,   title = {riskyData: Welcome to riskyData the tool for pulling observed data from the EAs API},   author = {Jonathan Payne and Oliver Dyer},   year = {2023},   note = {https://jonpayneea.github.io/riskyData/, https://github.com/JonPayneEA/riskyData}, }"},{"path":[]},{"path":"https://jonpayneea.github.io/riskyData/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Welcome to riskyData the tool for pulling observed data from the EAs API","text":"package part fleet flode tools designed members Evidence Risk. package, riskyData, used interact EAs Hydrology Data Explorer via API. Hydrometric data can pulled using built functions. Data stored containers implement strict quality controls. Data can interrogated using range inbuilt tools.","code":""},{"path":"https://jonpayneea.github.io/riskyData/index.html","id":"installation-and-loading","dir":"","previous_headings":"","what":"Installation and loading","title":"Welcome to riskyData the tool for pulling observed data from the EAs API","text":"can install development version riskyData GitHub : load package use;","code":"# install.packages(\"devtools\") devtools::install_github(\"JonPayne88/riskyData\") library(riskyData)"},{"path":"https://jonpayneea.github.io/riskyData/index.html","id":"example-1---importing-data","dir":"","previous_headings":"","what":"Example 1 - Importing data","title":"Welcome to riskyData the tool for pulling observed data from the EAs API","text":"find data available gauge; drill data use;","code":"## WISKI ID 2002 loadAPI(ID = '2002') #>    measure period          type #> 1:    flow    900 instantaneous #> 2:    flow  86400           min #> 3:    flow  86400          mean #> 4:   level  86400           max #> 5:    flow  86400           max #> 6:   level    900 instantaneous #> 7:   level  86400           min loadAPI(ID = '2002',         measure = 'flow',         period = 900,         type = 'instantaneous',         datapoints = 'range',         from = '2012-10-01 00:00',-         to = '2013-10-01 00:00') #> ℹ Compiling parameters for raw download✔ Compiling parameters for raw download [621ms] #> ℹ Downloading raw data✔ Downloading raw data [2.8s] #> ℹ Collating metadata✔ Collating metadata [663ms] #> ℹ Exporting data to HydroImport container✔ Exporting data to HydroImport container [396ms] #>  #> ── Class: HydroImport ────────────────────────────────────────────────────────── #>  #> ── Private: ── #>  #> Data Type: Raw Import #> Station name: Evesham #> WISKI ID: 2002 #> Data Type: Flow #> Modifications: NA #> Start: 2012-10-01 #> End: 2013-09-30 23:45:00 #> Time Step: 900 #> Observations: 35040 #> Easting: 404007 #> Northing: 243741 #> Longitude: -1.94292 #> Latitude: 52.091994 #>  #> ── Public: ── #>                   dateTime value quality #>     1: 2012-10-01 00:00:00 10.50    Good #>     2: 2012-10-01 00:15:00 10.40    Good #>     3: 2012-10-01 00:30:00 10.40    Good #>     4: 2012-10-01 00:45:00 10.40    Good #>     5: 2012-10-01 01:00:00 10.40    Good #>    ---                                   #> 35036: 2013-09-30 22:45:00  4.64    Good #> 35037: 2013-09-30 23:00:00  4.64    Good #> 35038: 2013-09-30 23:15:00  4.64    Good #> 35039: 2013-09-30 23:30:00  4.64    Good #> 35040: 2013-09-30 23:45:00  4.64    Good #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()"},{"path":"https://jonpayneea.github.io/riskyData/index.html","id":"example-2---compile-daily-flow-statistics","dir":"","previous_headings":"","what":"Example 2 - compile daily flow statistics","title":"Welcome to riskyData the tool for pulling observed data from the EAs API","text":"","code":"## Import the Bewdley dataset data(bewdley)  ## Using a pipe calculate the hydrological year and then calculate statistics bewdley$hydroYearDay()$dayStats(plot = TRUE) #> ℹ Calculating hydrological year and day✔ Calculating hydrological year and day [12.9s] #>      dayYear     Mean Median  Min Max   Perc5 Perc25  Perc75 Perc95 #>   1:       1 39.17188  19.30 9.68 210 10.4000 12.200  35.600 192.00 #>   2:       2 47.99227  25.80 9.64 225 10.2000 12.400  62.500 215.00 #>   3:       3 53.14900  34.55 9.26 255  9.9715 11.600  67.725 228.00 #>   4:       4 59.77555  40.65 9.39 252  9.9400 10.900  87.425 240.00 #>   5:       5 63.06871  34.70 9.76 228 10.2000 11.700 106.000 189.85 #>  ---                                                                #> 361:     361 33.29305  15.05 9.26 222 10.1000 10.975  35.925 163.85 #> 362:     362 36.36758  15.85 8.77 254  9.8800 11.300  28.500 245.00 #> 363:     363 38.64064  16.10 9.53 254  9.8115 11.000  26.100 250.00 #> 364:     364 42.81338  16.20 9.35 247  9.8445 12.175  38.125 214.85 #> 365:     365 40.54762  15.70 9.65 196 10.8000 12.500  31.550 172.00"},{"path":"https://jonpayneea.github.io/riskyData/index.html","id":"example-3---use-run-length-encoding-to-seperate-rainfall-events","dir":"","previous_headings":"","what":"Example 3 - Use run length encoding to seperate rainfall events","title":"Welcome to riskyData the tool for pulling observed data from the EAs API","text":"can integrated plots;","code":"## Import the Chesterton rain gauge data data(chesterton)  ## Calculate rain separation use RLE, minimum total event must be at least 2mm rainSep(dateTime = chesterton$data$dateTime,         precip = chesterton$data$value,         threshold = 0,         minTotal = 2,         roll = 0) #>       id               start                 end total #>   1:   1 2011-01-07 08:30:00 2011-01-07 10:00:00   6.5 #>   2:   2 2011-01-11 02:15:00 2011-01-11 03:00:00   2.0 #>   3:   3 2011-01-13 20:30:00 2011-01-13 22:15:00   5.0 #>   4:   4 2011-02-19 06:45:00 2011-02-19 08:30:00   4.0 #>   5:   5 2011-02-26 00:30:00 2011-02-26 01:15:00   3.0 #>  ---                                                   #> 861: 861 2022-09-09 14:30:00 2022-09-09 14:45:00   8.4 #> 862: 862 2022-09-09 15:30:00 2022-09-09 16:15:00   6.0 #> 863: 863 2022-09-26 10:00:00 2022-09-26 10:15:00   3.6 #> 864: 864 2022-09-30 14:15:00 2022-09-30 17:00:00   5.8 #> 865: 865 2022-09-30 18:00:00 2022-09-30 19:30:00   3.8 ## Plot the base data plot(chesterton$data$dateTime[34000:44000], chesterton$data$value[34000:44000],      ylim = rev(range(chesterton$data$value[30000:40000], na.rm = TRUE)),     type = 'h', ylab = \"Rainfall (mm)\", xlab = \"Date Time\")  ## Calculate the rain profiles using a 5hr aggregation dayRain <- rainSep(dateTime = chesterton$data$dateTime[34000:44000],                    precip = chesterton$data$value[34000:44000],                    threshold = 0,                    minTotal = 2,                    roll = 20)  ## Plot the identified windows for (i in seq_along(dayRain$id)){  polygon(x = c(dayRain$start[i], dayRain$start[i], dayRain$end[i],                dayRain$end[i]),          y = c(0, 12, 12, 0),          col = scales::alpha('red', 0.5),          border = NA) }  ## Overlay the original rainfall for clarity lines(chesterton$data$dateTime[34000:44000], chesterton$data$value[34000:44000])"},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jonpayneea.github.io/riskyData/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jonpayneea.github.io/riskyData/reference/annualAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"annualAgg — annualAgg","title":"annualAgg — annualAgg","text":"Aggregates sub annual time series annual resolution, aggregations carried calendar day rolling time period.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/annualAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"annualAgg — annualAgg","text":"","code":"annualAgg(x, method = \"mean\", ...)  # S3 method for data.table annualAgg(x, method = \"mean\", ...)  # S3 method for HydroImport annualAgg(x, method = \"mean\", ...)"},{"path":"https://jonpayneea.github.io/riskyData/reference/annualAgg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"annualAgg — annualAgg","text":"x Data generated riskyData package method 'mean', 'median', 'max', 'min', 'sum' ... variables required","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/annualAgg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"annualAgg — annualAgg","text":"dataset annually aggregated data, data stored HydroAggs container.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/annualAgg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"annualAgg — annualAgg","text":"","code":"data(bewdley)  # Calculate the mean annual (calendar year) flows annualAgg(bewdley) #>     dateTime annualMean #>  1:     2008   89.49173 #>  2:     2009   52.69865 #>  3:     2010   39.04404 #>  4:     2011   39.62156 #>  5:     2012   78.88227 #>  6:     2013   65.46530 #>  7:     2014   76.83255 #>  8:     2015   59.09761 #>  9:     2016   61.14972 #> 10:     2017   48.04278 #> 11:     2018   60.52330 #> 12:     2019   78.14450 #> 13:     2020   80.21779 #> 14:     2021   63.70356 #> 15:     2022   44.46631"},{"path":"https://jonpayneea.github.io/riskyData/reference/asVol.html","id":null,"dir":"Reference","previous_headings":"","what":"Add convert flow or rainfall data to a volume — asVol","title":"Add convert flow or rainfall data to a volume — asVol","text":"Add convert flow rainfall data volume","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/asVol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add convert flow or rainfall data to a volume — asVol","text":"","code":"asVol(x, area)  # S3 method for data.table asVol(x, area = NULL)  # S3 method for HydroImport asVol(x, area = NULL)  # S3 method for HydroAggs asVol(x, area = NULL)"},{"path":"https://jonpayneea.github.io/riskyData/reference/asVol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add convert flow or rainfall data to a volume — asVol","text":"x Data set classes HydroImport ¬HydroAggs area_km Area coverage rain gauges","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/asVol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add convert flow or rainfall data to a volume — asVol","text":"Calculated volume flow rainfall","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/asVol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add convert flow or rainfall data to a volume — asVol","text":"","code":"# Load bewdley dataset data(bewdley)  # Calculate volumes asVol(bewdley) #>                    dateTime value quality qcode volume #>      1: 2008-10-01 00:00:00  26.3    Good  <NA>  23670 #>      2: 2008-10-01 00:15:00  26.6    Good  <NA>  23940 #>      3: 2008-10-01 00:30:00  26.5    Good  <NA>  23850 #>      4: 2008-10-01 00:45:00  26.6    Good  <NA>  23940 #>      5: 2008-10-01 01:00:00  26.4    Good  <NA>  23760 #>     ---                                                #> 490844: 2022-09-30 22:45:00  11.2    Good  <NA>  10080 #> 490845: 2022-09-30 23:00:00  11.2    Good  <NA>  10080 #> 490846: 2022-09-30 23:15:00  11.3    Good  <NA>  10170 #> 490847: 2022-09-30 23:30:00  11.2    Good  <NA>  10080 #> 490848: 2022-09-30 23:45:00  11.2    Good  <NA>  10080  # Print the bewdley dataset bewdley #>  #> ── Class: HydroImport ────────────────────────────────────────────────────────── #>  #> ── Metadata: ── #>  #> Data Type: Raw Import #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: NA #> Start: 2008-10-01 #> End: 2022-09-30 23:45:00 #> Time Step: 900 #> Observations: 490848 #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #>  #> ── Observed data: ── #>  #>                    dateTime value quality qcode volume #>      1: 2008-10-01 00:00:00  26.3    Good  <NA>  23670 #>      2: 2008-10-01 00:15:00  26.6    Good  <NA>  23940 #>      3: 2008-10-01 00:30:00  26.5    Good  <NA>  23850 #>      4: 2008-10-01 00:45:00  26.6    Good  <NA>  23940 #>      5: 2008-10-01 01:00:00  26.4    Good  <NA>  23760 #>     ---                                                #> 490844: 2022-09-30 22:45:00  11.2    Good  <NA>  10080 #> 490845: 2022-09-30 23:00:00  11.2    Good  <NA>  10080 #> 490846: 2022-09-30 23:15:00  11.3    Good  <NA>  10170 #> 490847: 2022-09-30 23:30:00  11.2    Good  <NA>  10080 #> 490848: 2022-09-30 23:45:00  11.2    Good  <NA>  10080 #>  #>  #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()"},{"path":"https://jonpayneea.github.io/riskyData/reference/cumsumNA.html","id":null,"dir":"Reference","previous_headings":"","what":"cumsumNA — cumsumNA","title":"cumsumNA — cumsumNA","text":"Provides cumulative sum rain gauge data excluding NA values.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/cumsumNA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cumsumNA — cumsumNA","text":"","code":"cumsumNA(x, ...)  # S3 method for default cumsumNA(x)  # S3 method for HydroImport cumsumNA(x)  # S3 method for HydroAggs cumsumNA(x)"},{"path":"https://jonpayneea.github.io/riskyData/reference/cumsumNA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cumsumNA — cumsumNA","text":"x Raw rain gauge data merged dataset ... Additional parameters required","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/cumsumNA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cumsumNA — cumsumNA","text":"cumulative sum rain gauge data","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/cumsumNA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cumsumNA — cumsumNA","text":"","code":"data(chesterton)  # Apply cumulative sum dt <- cumsumNA(chesterton)  plot(dt$dateTime,      dt$cumSum,      main = \"Cumulative rainfall plot for Chesterton Gauge (WISKI: 164163)\",      xla = \"Date Time\",      ylab = \"Cumulative rainfall (mm)\",      type = \"l\")"},{"path":"https://jonpayneea.github.io/riskyData/reference/dailyAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"dailyAgg — dailyAgg","title":"dailyAgg — dailyAgg","text":"Aggregates sub daily time series daily resolution, aggregations carried calendar day rolling time period.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/dailyAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dailyAgg — dailyAgg","text":"","code":"dailyAgg(x, method = \"mean\", ...)  # S3 method for data.table dailyAgg(x, method = \"mean\", ...)  # S3 method for HydroImport dailyAgg(x, method = \"mean\", ...)"},{"path":"https://jonpayneea.github.io/riskyData/reference/dailyAgg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dailyAgg — dailyAgg","text":"x Data generated riskyData package method 'mean', 'median', 'max', 'min', 'sum' ... variables required","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/dailyAgg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dailyAgg — dailyAgg","text":"aggregated dataset taken daily resolution, data stored HydroAggs container.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/dailyAgg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dailyAgg — dailyAgg","text":"","code":"data(bewdley)  # Daily maximum flows dailyAgg(bewdley, method = \"max\") #>         dateTime dailyMax #>    1: 2008-10-01     37.0 #>    2: 2008-10-02     75.1 #>    3: 2008-10-03     72.7 #>    4: 2008-10-04    114.0 #>    5: 2008-10-05    135.0 #>   ---                     #> 5109: 2022-09-26     12.2 #> 5110: 2022-09-27     10.7 #> 5111: 2022-09-28     11.0 #> 5112: 2022-09-29     12.7 #> 5113: 2022-09-30     12.0"},{"path":"https://jonpayneea.github.io/riskyData/reference/dataAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"Data aggregation for HydroImport objects — dataAgg","title":"Data aggregation for HydroImport objects — dataAgg","text":"acts wrapper function aggregation functions sit within riskyData","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/dataAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data aggregation for HydroImport objects — dataAgg","text":"","code":"dataAgg(x = NULL, type = NULL, method = NULL)"},{"path":"https://jonpayneea.github.io/riskyData/reference/dataAgg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data aggregation for HydroImport objects — dataAgg","text":"x data.table sits within R6 HydroImport object type Set aggregation level either hourly', 'daily', 'monthly', 'annual', 'hydroYear' method Available aggregation methods include 'min', 'max', 'mean', 'median', 'sum'","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/dataAgg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data aggregation for HydroImport objects — dataAgg","text":"Aggregated dataset determined input type method. Data placed within HydroAggs type container","code":""},{"path":[]},{"path":"https://jonpayneea.github.io/riskyData/reference/dataAgg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data aggregation for HydroImport objects — dataAgg","text":"","code":"# Load bewdley dataset data(bewdley)  # Calculate mean hourly flows bewdley$dataAgg(type = \"hourly\", method = \"mean\") #> ℹ Allocating function riskyData::hourlyAgg #> ✔ Allocating function riskyData::hourlyAgg [18ms] #>  #> ℹ Computing hourly mean #> ✔ Computing hourly mean [4.5s] #>  #> ℹ Exporting to HydroAggs container #> ✔ Exporting to HydroAggs container [22ms] #>  #>  #> ── Class: HydroAggs ──────────────────────────────────────────────────────────── #>  #> ── Private: ── #>  #> Data Type: Aggregated - hourly mean #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: hourly mean #> Start: 2008-10-01 0 #> End: 2022-09-30 23 #> Time Step: Hourly Unstable #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #>  #> ── Public: ── #>  #>              dateTime hourlyMean #>      1:  2008-10-01 0     26.500 #>      2:  2008-10-01 1     26.150 #>      3:  2008-10-01 2     24.850 #>      4:  2008-10-01 3     23.750 #>      5:  2008-10-01 4     23.250 #>     ---                          #> 122708: 2022-09-30 19     10.725 #> 122709: 2022-09-30 20     10.750 #> 122710: 2022-09-30 21     11.000 #> 122711: 2022-09-30 22     11.200 #> 122712: 2022-09-30 23     11.225 #>  #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()  # Calculate median daily flows bewdley$dataAgg(type = \"daily\", method = \"median\") #> ℹ Allocating function riskyData::dailyAgg #> ✔ Allocating function riskyData::dailyAgg [13ms] #>  #> ℹ Computing daily median #> ✔ Computing daily median [49ms] #>  #> ℹ Exporting to HydroAggs container #> ✔ Exporting to HydroAggs container [10ms] #>  #>  #> ── Class: HydroAggs ──────────────────────────────────────────────────────────── #>  #> ── Private: ── #>  #> Data Type: Aggregated - daily median #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: daily median #> Start: 2008-10-01 #> End: 2022-09-30 #> Time Step: Daily Unstable #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #>  #> ── Public: ── #>  #>         dateTime dailyMedian #>    1: 2008-10-01       25.70 #>    2: 2008-10-02       69.80 #>    3: 2008-10-03       62.70 #>    4: 2008-10-04       95.50 #>    5: 2008-10-05      122.00 #>   ---                        #> 5109: 2022-09-26       10.50 #> 5110: 2022-09-27       10.30 #> 5111: 2022-09-28       10.60 #> 5112: 2022-09-29       11.55 #> 5113: 2022-09-30       11.20 #>  #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()  # Calculate min bewdley$dataAgg(type = \"monthly\", method = \"min\") #> ℹ Allocating function riskyData::monthlyAgg #> ✔ Allocating function riskyData::monthlyAgg [13ms] #>  #> ℹ Computing monthly min #> ✔ Computing monthly min [421ms] #>  #> ℹ Exporting to HydroAggs container #> ✔ Exporting to HydroAggs container [11ms] #>  #>  #> ── Class: HydroAggs ──────────────────────────────────────────────────────────── #>  #> ── Private: ── #>  #> Data Type: Aggregated - monthly min #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: monthly min #> Start: 2008 10 #> End: 2022 9 #> Time Step: Monthly Unstable #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #>  #> ── Public: ── #>  #>      dateTime Monthly_Min #>   1:  2008 10       23.10 #>   2:  2008 11       49.40 #>   3:  2008 12       37.30 #>   4:   2009 1       21.10 #>   5:   2009 2       27.30 #>  ---                      #> 164:   2022 5        9.66 #> 165:   2022 6        8.60 #> 166:   2022 7        8.40 #> 167:   2022 8        7.91 #> 168:   2022 9        7.99 #>  #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()  # Calculate annual (calendar year) max bewdley$dataAgg(type = \"annual\", method = \"max\") #> ℹ Allocating function riskyData::annualAgg #> ✔ Allocating function riskyData::annualAgg [15ms] #>  #> ℹ Computing annual max #> ✔ Computing annual max [89ms] #>  #> ℹ Exporting to HydroAggs container #> ✔ Exporting to HydroAggs container [9ms] #>  #>  #> ── Class: HydroAggs ──────────────────────────────────────────────────────────── #>  #> ── Private: ── #>  #> Data Type: Aggregated - annual max #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: annual max #> Start: 2008 #> End: 2022 #> Time Step: Annual Unstable #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #>  #> ── Public: ── #>  #>     dateTime annualMax #>  1:     2008       213 #>  2:     2009       312 #>  3:     2010       248 #>  4:     2011       346 #>  5:     2012       360 #>  6:     2013       376 #>  7:     2014       443 #>  8:     2015       320 #>  9:     2016       323 #> 10:     2017       221 #> 11:     2018       255 #> 12:     2019       375 #> 13:     2020       523 #> 14:     2021       496 #> 15:     2022       470 #>  #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()  # Calculate hydroYear max # Hydrological years need to be calculated for this. The `hydroYearDay()` function can be piped into the operation. bewdley$hydroYearDay()$dataAgg(type = \"hydroYear\", method = \"max\") #> ℹ Calculating hydrological year and day #> ✔ Calculating hydrological year and day [4.9s] #>  #> ℹ Allocating function riskyData::hydroYearAgg #> ✔ Allocating function riskyData::hydroYearAgg [11ms] #>  #> ℹ Computing hydroYear max #> ✔ Computing hydroYear max [39ms] #>  #> ℹ Exporting to HydroAggs container #> ✔ Exporting to HydroAggs container [9ms] #>  #>  #> ── Class: HydroAggs ──────────────────────────────────────────────────────────── #>  #> ── Private: ── #>  #> Data Type: Aggregated - hydroYear max #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: hydroYear max #> Start: #> End: #> Time Step: Hydrological Year Unstable #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #>  #> ── Public: ── #>  #>     hydroYear hydroYearMax #>  1:      2009          213 #>  2:      2010          312 #>  3:      2011          346 #>  4:      2012          266 #>  5:      2013          376 #>  6:      2014          443 #>  7:      2015          250 #>  8:      2016          323 #>  9:      2017          208 #> 10:      2018          255 #> 11:      2019          291 #> 12:      2020          523 #> 13:      2021          496 #> 14:      2022          470 #>  #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()  # Calculate total hourly flow # Flow has to be converted to volume. The `asVol()` function can be piped into the operation. bewdley$asVol()$dataAgg(type = \"hourly\", method = \"sum\") #> ℹ Calculating volumes #> ✔ Calculating volumes [10ms] #>  #> ℹ Allocating function riskyData::hourlyAgg #> ✔ Allocating function riskyData::hourlyAgg [11ms] #>  #> ℹ Computing hourly sum #> ✔ Computing hourly sum [3.7s] #>  #> ℹ Exporting to HydroAggs container #> ✔ Exporting to HydroAggs container [8ms] #>  #>  #> ── Class: HydroAggs ──────────────────────────────────────────────────────────── #>  #> ── Private: ── #>  #> Data Type: Aggregated - hourly sum #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: hourly sum #> Start: 2008-10-01 0 #> End: 2022-09-30 23 #> Time Step: Hourly Unstable #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #>  #> ── Public: ── #>  #>              dateTime hourlySum #>      1:  2008-10-01 0     95400 #>      2:  2008-10-01 1     94140 #>      3:  2008-10-01 2     89460 #>      4:  2008-10-01 3     85500 #>      5:  2008-10-01 4     83700 #>     ---                         #> 122708: 2022-09-30 19     38610 #> 122709: 2022-09-30 20     38700 #> 122710: 2022-09-30 21     39600 #> 122711: 2022-09-30 22     40320 #> 122712: 2022-09-30 23     40410 #>  #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()"},{"path":"https://jonpayneea.github.io/riskyData/reference/dayStats.html","id":null,"dir":"Reference","previous_headings":"","what":"dayStats — dayStats","title":"dayStats — dayStats","text":"Daily statistics imported data","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/dayStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dayStats — dayStats","text":"","code":"dayStats(   x,   methods = c(\"mean\", \"median\", \"min\", \"max\"),   percentiles = c(5, 25, 75, 95),   hydroDay = TRUE,   plot = TRUE,   ... )  # S3 method for data.table dayStats(   x = NULL,   methods = c(\"mean\", \"median\", \"min\", \"max\"),   percentiles = c(5, 25, 75, 95),   hydroDay = TRUE,   plot = TRUE,   year = NULL,   ... )"},{"path":"https://jonpayneea.github.io/riskyData/reference/dayStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dayStats — dayStats","text":"x Data generated riskyData package methods 'mean', 'median', 'max', 'min', 'sum' percentiles Set 5, 25, 75, 95 plot Set TRUE, produce plot statistics ... variables required hyrdroDay Set TRUE, use hydrological day","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/dayStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dayStats — dayStats","text":"Data aggregated daily resolution","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/dayStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dayStats — dayStats","text":"","code":"# Load data data(bewdley)  # Calculate hydrological year bewdley$hydroYearDay() #> ℹ Calculating hydrological year and day #> ✔ Calculating hydrological year and day [5s] #>   # Calculate daily statistics bewdley$dayStats(plot = TRUE)  #>      dayYear     Mean Median  Min Max   Perc5 Perc25  Perc75 Perc95 #>   1:       1 39.17188  19.30 9.68 210 10.4000 12.200  35.600 192.00 #>   2:       2 47.99227  25.80 9.64 225 10.2000 12.400  62.500 215.00 #>   3:       3 53.14900  34.55 9.26 255  9.9715 11.600  67.725 228.00 #>   4:       4 59.77555  40.65 9.39 252  9.9400 10.900  87.425 240.00 #>   5:       5 63.06871  34.70 9.76 228 10.2000 11.700 106.000 189.85 #>  ---                                                                #> 361:     361 33.29305  15.05 9.26 222 10.1000 10.975  35.925 163.85 #> 362:     362 36.36758  15.85 8.77 254  9.8800 11.300  28.500 245.00 #> 363:     363 38.64064  16.10 9.53 254  9.8115 11.000  26.100 250.00 #> 364:     364 42.81338  16.20 9.35 247  9.8445 12.175  38.125 214.85 #> 365:     365 40.54762  15.70 9.65 196 10.8000 12.500  31.550 172.00"},{"path":"https://jonpayneea.github.io/riskyData/reference/getMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Import metadata for a gauge — getMeta","title":"Import metadata for a gauge — getMeta","text":"Import metadata gauge","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/getMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import metadata for a gauge — getMeta","text":"","code":"getMeta(ID = NULL, mainLink = NULL, measureLink = NULL, import = NULL)"},{"path":"https://jonpayneea.github.io/riskyData/reference/getMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import metadata for a gauge — getMeta","text":"ID Use specify particular WISKI ID mainLink URL main data download measureLink URL measures element site import main raw data import file, used collate dates etc.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/getMeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import metadata for a gauge — getMeta","text":"data.table gauge metadata, adding R6 hydroLoad","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/getMeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import metadata for a gauge — getMeta","text":"","code":"# getMeta(2001)"},{"path":"https://jonpayneea.github.io/riskyData/reference/hourlyAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"hourlyAgg — hourlyAgg","title":"hourlyAgg — hourlyAgg","text":"Aggregates sub hourly time series hourly resolution, aggregations carried calendar day rolling time period.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/hourlyAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hourlyAgg — hourlyAgg","text":"","code":"hourlyAgg(x, method = \"mean\", ...)  # S3 method for data.table hourlyAgg(x, method = \"mean\", ...)  # S3 method for HydroImport hourlyAgg(x, method = \"mean\", ...)"},{"path":"https://jonpayneea.github.io/riskyData/reference/hourlyAgg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hourlyAgg — hourlyAgg","text":"x Data generated riskyData package method 'mean', 'median', 'max', 'min', 'sum' ... variables required","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/hourlyAgg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hourlyAgg — hourlyAgg","text":"dataset hourly aggregated, data stored HydroAggs container.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/hourlyAgg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hourlyAgg — hourlyAgg","text":"","code":"data(bewdley)  ## Calculate median flow hourlyAgg(bewdley, method = \"median\") #>              dateTime hourlyMedian #>      1:  2008-10-01 0        26.55 #>      2:  2008-10-01 1        26.25 #>      3:  2008-10-01 2        24.90 #>      4:  2008-10-01 3        23.85 #>      5:  2008-10-01 4        23.30 #>     ---                            #> 122708: 2022-09-30 19        10.70 #> 122709: 2022-09-30 20        10.75 #> 122710: 2022-09-30 21        11.05 #> 122711: 2022-09-30 22        11.20 #> 122712: 2022-09-30 23        11.20"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroAggs.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 object for imported data via the EA API — HydroAggs","title":"R6 object for imported data via the EA API — HydroAggs","text":"base class data imported via API. HydroAggs contains public raw data private metadata.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroAggs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R6 object for imported data via the EA API — HydroAggs","text":"class containing raw data, metadata methods","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroAggs.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 object for imported data via the EA API — HydroAggs","text":"riskyData::HydroImport -> HydroAggs","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroAggs.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 object for imported data via the EA API — HydroAggs","text":"riskyData::HydroImport$addRating() riskyData::HydroImport$asVol() riskyData::HydroImport$coords() riskyData::HydroImport$dataAgg() riskyData::HydroImport$dayStats() riskyData::HydroImport$flowDuration() riskyData::HydroImport$hydroYearDay() riskyData::HydroImport$initialize() riskyData::HydroImport$meta() riskyData::HydroImport$methods() riskyData::HydroImport$nrfa() riskyData::HydroImport$plot() riskyData::HydroImport$quality() riskyData::HydroImport$rateFlow() riskyData::HydroImport$rateStage() riskyData::HydroImport$rmHY() riskyData::HydroImport$rmHYD() riskyData::HydroImport$rmVol() riskyData::HydroImport$rollingAggs() riskyData::HydroImport$summary() riskyData::HydroImport$window()","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroAggs.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 object for imported data via the EA API — HydroAggs","text":"HydroAggsFactory$print() HydroAggsFactory$clone()","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroAggs.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"R6 object for imported data via the EA API — HydroAggs","text":"Display R6 object","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroAggs.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroAggs","text":"","code":"HydroAggsFactory$print(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroAggs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroAggs","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroAggs.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 object for imported data via the EA API — HydroAggs","text":"objects class cloneable method.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroAggs.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroAggs","text":"","code":"HydroAggsFactory$clone(deep = FALSE)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroAggs.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroAggs","text":"deep Whether make deep clone.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 object for imported data via the EA API — HydroImport","title":"R6 object for imported data via the EA API — HydroImport","text":"base class data imported via API. HydroImport contains public raw data private metadata.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"R6 object for imported data via the EA API — HydroImport","text":"class containing raw data, metadata methods","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 object for imported data via the EA API — HydroImport","text":"data Imported data via API tool. Uses data.table. rating Rating parameters. Uses data.table. moment 1 rating can applied","code":""},{"path":[]},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 object for imported data via the EA API — HydroImport","text":"HydroImportFactory$new() HydroImportFactory$print() HydroImportFactory$methods() HydroImportFactory$summary() HydroImportFactory$asVol() HydroImportFactory$hydroYearDay() HydroImportFactory$rmVol() HydroImportFactory$rmHY() HydroImportFactory$rmHYD() HydroImportFactory$addRating() HydroImportFactory$rateFlow() HydroImportFactory$rateStage() HydroImportFactory$window() HydroImportFactory$coords() HydroImportFactory$nrfa() HydroImportFactory$dataAgg() HydroImportFactory$rollingAggs() HydroImportFactory$meta() HydroImportFactory$dayStats() HydroImportFactory$plot() HydroImportFactory$flowDuration() HydroImportFactory$quality() HydroImportFactory$clone()","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 object for imported data via the EA API — HydroImport","text":"Initialise new HydroImport object","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$new(   data = NA,   rating = NULL,   dataType = \"Raw Import\",   modifications = NA,   stationName = NA,   riverName = NA,   WISKI = NA,   RLOID = NA,   stationGuide = NA,   baseURL = NA,   dataURL = NA,   measureURL = NA,   idNRFA = NA,   urlNRFA = NA,   easting = NA,   northing = NA,   latitude = NA,   longitude = NA,   area = NA,   parameter = NA,   unitName = NA,   unit = NA,   datum = NA,   boreholeDepth = NA,   aquifer = NA,   start = NA,   end = NA,   timeStep = NA,   timeZone = NA,   records = NA )"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"data Raw data rating Set blank, data requires rating add dataType Details type data environment modifications Details modifications made data stationName Name gauge riverName River name WISKI WISKI ID RLOID River Levels Internet ID stationGuide Station Unique Identifier baseURL Base URL used API dataURL End URL downloaded raw data measureURL Primarily used gaining metadata idNRFA National River Flow Archive station identifier urlNRFA National River Flow Archive station URL easting Easting coordinate northing Northing coordinate latitude Latitude coordinate longitude Longitude coordinate area Catchment area flow/level gauge parameter Details collected data e.g. flow, level etc. unitName Unit name used unit Details unit measurement datum Datum gauge, available boreholeDepth Depth borehole recording aquifer Details aquifer type start Function calculates date first imported record end Function calculates date last imported record timeStep Function calculates timestep seconds timeZone Time zone used data, defaults GMT records Function calculates number records","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"R6 object for imported data via the EA API — HydroImport","text":"Display R6 object","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$print(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-methods-","dir":"Reference","previous_headings":"","what":"Method methods()","title":"R6 object for imported data via the EA API — HydroImport","text":"Display methods available R6 object","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$methods(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"data(bewdley) bewdley$methods()"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-summary-","dir":"Reference","previous_headings":"","what":"Method summary()","title":"R6 object for imported data via the EA API — HydroImport","text":"Display summary R6 object","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$summary(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"data(bewdley) bewdley$summary()"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-asvol-","dir":"Reference","previous_headings":"","what":"Method asVol()","title":"R6 object for imported data via the EA API — HydroImport","text":"Calculate volume water flow rainfall data","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$asVol(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-hydroyearday-","dir":"Reference","previous_headings":"","what":"Method hydroYearDay()","title":"R6 object for imported data via the EA API — HydroImport","text":"Calculate hydrological year day","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$hydroYearDay(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-rmvol-","dir":"Reference","previous_headings":"","what":"Method rmVol()","title":"R6 object for imported data via the EA API — HydroImport","text":"Remove calculated volume","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$rmVol(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-rmhy-","dir":"Reference","previous_headings":"","what":"Method rmHY()","title":"R6 object for imported data via the EA API — HydroImport","text":"Remove calculated hydroYear","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$rmHY(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-rmhyd-","dir":"Reference","previous_headings":"","what":"Method rmHYD()","title":"R6 object for imported data via the EA API — HydroImport","text":"Remove calculated hydrological day","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$rmHYD(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-addrating-","dir":"Reference","previous_headings":"","what":"Method addRating()","title":"R6 object for imported data via the EA API — HydroImport","text":"Add rating table HydroImport HydroAggs objects","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$addRating(C = NULL, A = NULL, B = NULL, max = NULL)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"C parameter parameter B parameter max parameter","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-rateflow-","dir":"Reference","previous_headings":"","what":"Method rateFlow()","title":"R6 object for imported data via the EA API — HydroImport","text":"Converts stage flow using supplied rating. uses following equation; Q = C(h - )^b","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$rateFlow(start = 0, full = FALSE)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"start defaults 0, change set different start point rating conversion. full set FALSE (default) data table stage flows supplied. set TRUE new HydroImport object created.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-ratestage-","dir":"Reference","previous_headings":"","what":"Method rateStage()","title":"R6 object for imported data via the EA API — HydroImport","text":"Converts flow stage using supplied rating. uses following equation; h = ((Q/)^(1/C))- b","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$rateStage(start = 0, full = FALSE)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"start defaults 0, change set different start point rating conversion. full set FALSE (default) data table stage flows supplied. set TRUE new HydroImport object created.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-window-","dir":"Reference","previous_headings":"","what":"Method window()","title":"R6 object for imported data via the EA API — HydroImport","text":"Extract windows data object using start end date/times","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$window(start = NULL, end = NULL, export = \"dt\")"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"start Function calculates date first imported record end Function calculates date last imported record export Set \"dt\", exports data.table public data. set \"snip\" R6 object modified. Start date/time end date/time, kept blank default last time step","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-coords-","dir":"Reference","previous_headings":"","what":"Method coords()","title":"R6 object for imported data via the EA API — HydroImport","text":"Return coordinates gauge","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$coords(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"data(bewdley) bewdley$coords()"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-nrfa-","dir":"Reference","previous_headings":"","what":"Method nrfa()","title":"R6 object for imported data via the EA API — HydroImport","text":"Return NRFA details gauge","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$nrfa(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"data(bewdley) bewdley$nrfa()"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-dataagg-","dir":"Reference","previous_headings":"","what":"Method dataAgg()","title":"R6 object for imported data via the EA API — HydroImport","text":"Return aggregated data","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$dataAgg(type = NULL, method = NULL)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"type Set aggrgegation level either hourly', 'daily', 'monthly', 'annual', 'hydroYear' method Available aggregation methods include 'min', 'max', 'mean', 'median', 'sum'","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-rollingaggs-","dir":"Reference","previous_headings":"","what":"Method rollingAggs()","title":"R6 object for imported data via the EA API — HydroImport","text":"Return different user selecting rolling aggregations","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$rollingAggs(   method = \"mean\",   rolls = c(1, 2, 3, 4, 8, 24, 120),   interval = 0.25 )"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"method Choose mean, median, min, max, sum volumes rolls hourly aggregations selected user interval Corrects time step data, set 0.25 hours","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-meta-","dir":"Reference","previous_headings":"","what":"Method meta()","title":"R6 object for imported data via the EA API — HydroImport","text":"Returns metadata data.table","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$meta(transform = FALSE)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-17","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"transform Set FALSE. TRUE data.table transformed increases readability console.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"data(bewdley) bewdley$meta()"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-daystats-","dir":"Reference","previous_headings":"","what":"Method dayStats()","title":"R6 object for imported data via the EA API — HydroImport","text":"Daily statistics imported data","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$dayStats(plot = TRUE, year = NULL)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-18","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"plot Set TRUE, produce plot statistics year Set NULL, overlays mean daily flow chosen hydrological year","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"R6 object for imported data via the EA API — HydroImport","text":"Plot data years","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$plot(cols = 3)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-19","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"cols Set 3, use specify many columns graphs ","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"data(bewdley) bewdley$plot()"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-flowduration-","dir":"Reference","previous_headings":"","what":"Method flowDuration()","title":"R6 object for imported data via the EA API — HydroImport","text":"Flow duration curve data","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$flowDuration(perc = c(5, 25, 75, 95))"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-20","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"perc Determine flow percentiles. Set c(5, 25, 75, 95)","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-quality-","dir":"Reference","previous_headings":"","what":"Method quality()","title":"R6 object for imported data via the EA API — HydroImport","text":"Displays number observations quality flag","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$quality(.)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-21","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":". (ignored).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"data(bewdley) bewdley$quality()"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 object for imported data via the EA API — HydroImport","text":"objects class cloneable method.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"HydroImportFactory$clone(deep = FALSE)"},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"arguments-22","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 object for imported data via the EA API — HydroImport","text":"deep Whether make deep clone.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/HydroImport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 object for imported data via the EA API — HydroImport","text":"","code":"## ------------------------------------------------ ## Method `HydroImportFactory$methods` ## ------------------------------------------------  data(bewdley) bewdley$methods() #> ┌ Methods ───────────────────────────────────────────────────────────────────────────────────┐ #> │ obj$data    →    Returns the raw data imported via the API                                 │ #> │ obj$rating    →    Returns the user imported rating details                                │ #> │ obj$meta()    →    Returns the metadata associated with the object                         │ #> │ obj$asVol()    →    Calculates the volume of water relative to the time step, see ?asVol   │ #> │ obj$hydroYearDay()    →    Calculates the hydrological year and day, see ?hydroYearDay     │ #> │ obj$rmVol()    →    Removes the volume column                                              │ #> │ obj$rmHY()    →    Removes the hydroYear column                                            │ #> │ obj$rmHYD()    →    Removes the hydroYearDay column                                        │ #> │ obj$summary()    →    Provides a quick summary of the raw data                             │ #> │ obj$coords()    →    Returns coordinates from the metadata                                 │ #> │ obj$nrfa()    →    Returns the NRFA data from the metadata                                 │ #> │ obj$dataAgg()    →    Aggregate data by, hour, day, month calendar year and hydroYear      │ #> │ obj$rollingAggs()    →    Uses user specified aggregation timings, see ?rollingAggs        │ #> │ obj$dayStats()    →    Daily statistics of flow, carried out on hydrological or calendar … │ #> │ obj$quality()    →    Provides a quick summary table of the data qualiity flags            │ #> │ obj$plot()    →    Create a plot of each year of data, by hydrological year                │ #> │ obj$window()    →    Extracts the subset of data observed between the times start and end  │ #> │ obj$rateFlow()    →    Converts stage into a rated flow using the specified rating table   │ #> │ obj$rateStage()    →    Converts flow into a rated stage using the specified rating table  │ #> └────────────────────────────────────────────────────────────────────────────────────────────┘  ## ------------------------------------------------ ## Method `HydroImportFactory$summary` ## ------------------------------------------------  data(bewdley) bewdley$summary() #> hydroLoad:  #> \tData Type: Raw Import #> \tStation ID: 2001 #> \tStart: 2008-10-01 #> \tEnd: 2022-09-30 23:45:00 #> \tTime Zone: GMT #> \tObservations: 490848 #> \tParameter: Flow #> \tUnit Type: m3/s #> \tUnit: http://qudt.org/1.1/vocab/unit#CubicMeterPerSecond  ## ------------------------------------------------ ## Method `HydroImportFactory$coords` ## ------------------------------------------------  data(bewdley) bewdley$coords() #>    stationName WISKI Easting Northing Latitude Longitude #> 1:     Bewdley  2001  378235   276165 52.38307 -2.321186  ## ------------------------------------------------ ## Method `HydroImportFactory$nrfa` ## ------------------------------------------------  data(bewdley) bewdley$nrfa() #>    WISKI codeNRFA                                             urlNRFA #> 1:  2001    54001 https://nrfa.ceh.ac.uk/data/station/info/54001.html  ## ------------------------------------------------ ## Method `HydroImportFactory$meta` ## ------------------------------------------------  data(bewdley) bewdley$meta() #>      dataType modifications stationName    riverName WISKI RLOID stationGuide #> 1: Raw Import            NA     Bewdley River Severn  2001  2001           NA #>                                                  baseURL #> 1: http://environment.data.gov.uk/hydrology/id/measures/ #>                                                                                                                                 dataURL #> 1: 8820d897-a09e-4857-8095-5834fee6962f-flow-i-900-m3s-qualified/readings.json?_limit=2000000&mineq-date=2008-10-01&max-date=2022-10-01 #>                                                       measureURL idNRFA #> 1: 8820d897-a09e-4857-8095-5834fee6962f-flow-i-900-m3s-qualified  54001 #>                                                urlNRFA easting northing #> 1: https://nrfa.ceh.ac.uk/data/station/info/54001.html  378235   276165 #>    latitude longitude area parameter unitName #> 1: 52.38307 -2.321186 4325      Flow     m3/s #>                                                  unit datum boreholeDepth #> 1: http://qudt.org/1.1/vocab/unit#CubicMeterPerSecond    NA            NA #>    aquifer      start                 end timeStep timeZone records #> 1:      NA 2008-10-01 2022-09-30 23:45:00      900      GMT  490848  ## ------------------------------------------------ ## Method `HydroImportFactory$plot` ## ------------------------------------------------  data(bewdley) bewdley$plot() #> Error in bewdley$plot(): hydroYear field is not present in the data.table  ## ------------------------------------------------ ## Method `HydroImportFactory$quality` ## ------------------------------------------------  data(bewdley) bewdley$quality() #>      quality  count #> 1:      Good 457101 #> 2: Estimated  12019 #> 3:   Suspect    669 #> 4: Unchecked  21059"},{"path":"https://jonpayneea.github.io/riskyData/reference/hydroYearAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"hydroYearAgg — hydroYearAgg","title":"hydroYearAgg — hydroYearAgg","text":"Aggregates sub annual time series hydrological year resolution, aggregations carried calendar day rolling time period.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/hydroYearAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hydroYearAgg — hydroYearAgg","text":"","code":"hydroYearAgg(x, method = \"mean\", ...)  # S3 method for data.table hydroYearAgg(x, method = \"mean\", ...)  # S3 method for HydroImport hydroYearAgg(x, method = \"mean\", ...)"},{"path":"https://jonpayneea.github.io/riskyData/reference/hydroYearAgg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"hydroYearAgg — hydroYearAgg","text":"x Data generated riskyData package method 'mean', 'median', 'max', 'min', 'sum' ... variables required","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/hydroYearAgg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"hydroYearAgg — hydroYearAgg","text":"Data aggregated hydrological year, data stored HydroAggs container.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/hydroYearAgg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"hydroYearAgg — hydroYearAgg","text":"","code":"data(bewdley)  # Calculate the hydrological year bewdley$hydroYearDay() #> ℹ Calculating hydrological year and day #> ✔ Calculating hydrological year and day [5.6s] #>   # Calculate the annual maximum flows for Bewdley (hydrological year) hydroYearAgg(bewdley, method = \"max\") #>     hydroYear hydroYearMax #>  1:      2009          213 #>  2:      2010          312 #>  3:      2011          346 #>  4:      2012          266 #>  5:      2013          376 #>  6:      2014          443 #>  7:      2015          250 #>  8:      2016          323 #>  9:      2017          208 #> 10:      2018          255 #> 11:      2019          291 #> 12:      2020          523 #> 13:      2021          496 #> 14:      2022          470"},{"path":"https://jonpayneea.github.io/riskyData/reference/hydroYearDay.html","id":null,"dir":"Reference","previous_headings":"","what":"HydroYearDay — hydroYearDay","title":"HydroYearDay — hydroYearDay","text":"Creates fields hydrological year hydrological day. Speed slow, needs conversion C++ future iterations.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/hydroYearDay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HydroYearDay — hydroYearDay","text":"","code":"hydroYearDay(x, calendar = \"oct_us_gb\", ...)  # S3 method for data.table hydroYearDay(x, calendar = \"oct_us_gb\")"},{"path":"https://jonpayneea.github.io/riskyData/reference/hydroYearDay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HydroYearDay — hydroYearDay","text":"d Array dates class Date hy_cal hydrological year calendar. Set 'oct_us_gb' (USA UK), can also 'sep_br' (Brazil), 'apr_cl' (Chille).","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/hydroYearDay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HydroYearDay — hydroYearDay","text":"Creates hydrological year hydrological day column","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/hydroYearDay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HydroYearDay — hydroYearDay","text":"","code":"# Load bewdley dataset data(bewdley)  # Inspect the data bewdley$data #>                    dateTime value quality qcode #>      1: 2008-10-01 00:00:00  26.3    Good  <NA> #>      2: 2008-10-01 00:15:00  26.6    Good  <NA> #>      3: 2008-10-01 00:30:00  26.5    Good  <NA> #>      4: 2008-10-01 00:45:00  26.6    Good  <NA> #>      5: 2008-10-01 01:00:00  26.4    Good  <NA> #>     ---                                         #> 490844: 2022-09-30 22:45:00  11.2    Good  <NA> #> 490845: 2022-09-30 23:00:00  11.2    Good  <NA> #> 490846: 2022-09-30 23:15:00  11.3    Good  <NA> #> 490847: 2022-09-30 23:30:00  11.2    Good  <NA> #> 490848: 2022-09-30 23:45:00  11.2    Good  <NA>  # Add hydrological year and hydrological day columns bewdley$hydroYearDay() #> ℹ Calculating hydrological year and day #> ✔ Calculating hydrological year and day [5.5s] #>   # Print the bewdley dataset bewdley #>  #> ── Class: HydroImport ────────────────────────────────────────────────────────── #>  #> ── Metadata: ── #>  #> Data Type: Raw Import #> Station name: Bewdley #> WISKI ID: 2001 #> Data Type: Flow #> Modifications: NA #> Start: 2008-10-01 #> End: 2022-09-30 23:45:00 #> Time Step: 900 #> Observations: 490848 #> Easting: 378235 #> Northing: 276165 #> Longitude: -2.321186 #> Latitude: 52.383072 #>  #>  #> ── Observed data: ── #>  #>                    dateTime value quality qcode hydroYear hydroYearDay #>      1: 2008-10-01 00:00:00  26.3    Good  <NA>      2009            1 #>      2: 2008-10-01 00:15:00  26.6    Good  <NA>      2009            1 #>      3: 2008-10-01 00:30:00  26.5    Good  <NA>      2009            1 #>      4: 2008-10-01 00:45:00  26.6    Good  <NA>      2009            1 #>      5: 2008-10-01 01:00:00  26.4    Good  <NA>      2009            1 #>     ---                                                                #> 490844: 2022-09-30 22:45:00  11.2    Good  <NA>      2022          365 #> 490845: 2022-09-30 23:00:00  11.2    Good  <NA>      2022          365 #> 490846: 2022-09-30 23:15:00  11.3    Good  <NA>      2022          365 #> 490847: 2022-09-30 23:30:00  11.2    Good  <NA>      2022          365 #> 490848: 2022-09-30 23:45:00  11.2    Good  <NA>      2022          365 #>  #>  #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()"},{"path":"https://jonpayneea.github.io/riskyData/reference/loadAPI.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull data from the Environment Agency's API — loadAPI","title":"Pull data from the Environment Agency's API — loadAPI","text":"loadAPI function used interogate EAs API. Data station can pulled, specified single site various datasets can pulled.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/loadAPI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull data from the Environment Agency's API — loadAPI","text":"","code":"loadAPI(   ID = NULL,   measure = NULL,   period = NULL,   type = NULL,   datapoints = \"standard\",   from = NULL,   to = NULL,   lat = NULL,   long = NULL,   easting = NULL,   northing = NULL,   dist = NULL,   obsProperty = NULL,   meta = TRUE,   rtExt = FALSE )"},{"path":"https://jonpayneea.github.io/riskyData/reference/loadAPI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull data from the Environment Agency's API — loadAPI","text":"ID Use specify particular WISKI ID downloading stations 'wiski' 'nrfa' filter results. Additionally access real time APIs use \"flood\" critical sites \"tidal\" category tide gauges. measure Use exporting observations select available parameter. Generally 'flow', 'level', 'groundwater' period can select time steps available, generally 900 (15 min) 86400 (daily) type Selects data type, instantaneous, min, max etc. datapoints Allows decide time series pulling data First time step choice Last time step choice lat Latitude coordinate searching geographic area long Longitude coordinate searching geographic area easting Easting coordinate searching geographic area northing Northing coordinate searching geographic area dist Distance km far wish search obsProperty Used filter stations identifying sites. Available metrics; \"waterFlow\", \"waterLevel\", \"rainfall\", \"groundwaterLevel\", \"wind\", \"temperature\", \"ammonium\", \"dissolved-oxygen\", \"conductivity\", \"ph\", \"temperature\", \"turbidity\", \"nitrate\", \"chlorophyll\", \"salinity\", \"bga\", \"fdom\" meta Set TRUE, exports metadata gauge data request rtExt Set NULL, TRUE hydrological data series extended real time API","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/loadAPI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull data from the Environment Agency's API — loadAPI","text":"Various outputs see vignettes","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/loadAPI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull data from the Environment Agency's API — loadAPI","text":"","code":"#loadAPI()  loadAPI(easting = 378235, northing = 276165, dist = 30, ID = \"nrfa\") #>     wiskiID        label      riverName observedProperty easting northing #>  1:    2001      Bewdley   River Severn       waterLevel  378235   276165 #>  2:    2001      Bewdley   River Severn        waterFlow  378235   276165 #>  3:    2034  Oak Cottage   Dowles Brook       waterLevel  377105   276425 #>  4:    2034  Oak Cottage   Dowles Brook        waterFlow  377105   276425 #>  5:    2063    Prestwood    River Stour        waterFlow  386705   286155 #>  6:    2193 Wards Bridge   Hadley Brook        waterFlow  387025   263145 #>  7:    2011 Harford Hill River Salwarpe       waterLevel  386865   261935 #>  8:    2011 Harford Hill River Salwarpe        waterFlow  386865   261935 #>  9:    2024      Burcote    River Worfe       waterLevel  374605   295345 #> 10:    2024      Burcote    River Worfe        waterFlow  374605   295345 #>          lat      long dateOpened catchmentArea nrfaStationID #>  1: 52.38307 -2.321186 1921-04-01        4325.0         54001 #>  2: 52.38307 -2.321186 1921-04-01        4325.0         54001 #>  3: 52.38536 -2.337805 1971-08-24          40.8         54034 #>  4: 52.38536 -2.337805 1971-08-24          40.8         54034 #>  5: 52.47315 -2.197148 1972-08-01          89.9         54063 #>  6: 52.26630 -2.191539 1987-12-10          53.0         54096 #>  7: 52.25542 -2.193836 1960-12-19         184.0         54011 #>  8: 52.25542 -2.193836 1960-12-19         184.0         54011 #>  9: 52.55534 -2.375983 1969-03-21         258.0         54024 #> 10: 52.55534 -2.375983 1969-03-21         258.0         54024  loadAPI(ID = \"L1207\") #>    measure period          type #> 1:   level  86400           min #> 2:   level    900 instantaneous #> 3:   level  86400           max  loadAPI(   ID = \"L1207\",   measure = \"level\",   period = 900,   type = \"instantaneous\",   datapoints = \"earliest\" ) #> ℹ Compiling parameters for raw download #> ✔ Compiling parameters for raw download [250ms] #>  #> ℹ Downloading raw data #> ✔ Downloading raw data [114ms] #>  #> ℹ Collating metadata #> ✔ Collating metadata [360ms] #>  #> ℹ Exporting data to HydroImport container #> ✔ Exporting data to HydroImport container [75ms] #>  #>  #> ── Class: HydroImport ────────────────────────────────────────────────────────── #>  #> ── Metadata: ── #>  #> Data Type: Raw Import #> Station name: Todmorden Salford #> WISKI ID: L1207 #> Data Type: Level #> Modifications: NA #> Start: 2003-03-09 #> End: 2003-03-09 #> Time Step: NA #> Observations: 1 #> Easting: 393380 #> Northing: 423770 #> Longitude: -2.101764 #> Latitude: 53.710296 #>  #>  #> ── Observed data: ── #>  #>      dateTime value quality #> 1: 2003-03-09 0.811    Good #>  #>  #> For more details use the $methods() function, the format should be as #> `Object_name`$methods()  dt <- loadAPI(   ID = \"L1207\",   measure = \"level\",   period = 900,   type = \"instantaneous\",   datapoints = \"all\" ) #> ℹ Compiling parameters for raw download #> ✔ Compiling parameters for raw download [167ms] #>  #> ℹ Downloading raw data #> ✔ Downloading raw data [27.5s] #>  #> ℹ Collating metadata #> ✔ Collating metadata [195ms] #>  #> ℹ Exporting data to HydroImport container #> ✔ Exporting data to HydroImport container [17ms] #>   with(dt$data, plot(value ~ dateTime,   type = \"l\",   xlab = \"Time\",   ylab = \"Stage (mAoD)\" ))"},{"path":"https://jonpayneea.github.io/riskyData/reference/loadPE.html","id":null,"dir":"Reference","previous_headings":"","what":"Load potential evaporation data — loadPE","title":"Load potential evaporation data — loadPE","text":"Load potential evaporation data","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/loadPE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load potential evaporation data — loadPE","text":"","code":"loadPE(link, skip = 0, metaRows = 10, impute = TRUE)"},{"path":"https://jonpayneea.github.io/riskyData/reference/loadPE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load potential evaporation data — loadPE","text":"link Link specified file import skip Stet zero, denotes number rows wish skip metaRows Set 10, determines amount rows set metadata impute Set TRUE, fills missing data using 'forecast::na.interp()' function","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/loadPE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load potential evaporation data — loadPE","text":"tidied dataset PE data","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/loadPE.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load potential evaporation data — loadPE","text":"Loads PE data obtained HYRAD. Missing data imputed using 'na.interp()' function forecast package. seasonal series, robust STL decomposition first computed. linear interpolation applied seasonally adjusted data, seasonal component added back.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/mergeData.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge HydroImport and HydroAggs R6 objects — mergeData","title":"Merge HydroImport and HydroAggs R6 objects — mergeData","text":"mergeData() used combine multiple R6 encapsulations. data HydroImport HydroAggs classes. Depending metadata argument, metadata can exported merged dataset list. merging process carried looped full joins, allows datasets f varying lengths collated. Missing information padded NAs.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/mergeData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge HydroImport and HydroAggs R6 objects — mergeData","text":"","code":"mergeData(..., metadata = FALSE)"},{"path":"https://jonpayneea.github.io/riskyData/reference/mergeData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge HydroImport and HydroAggs R6 objects — mergeData","text":"... Datasets downloaded EAs API set inside R6 container metadata Set FALSE, TRUE collated metadata exported merged dataset","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/mergeData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge HydroImport and HydroAggs R6 objects — mergeData","text":"merged dataset data,table, metadata TRUE list 2 data.tables","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/mergeData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge HydroImport and HydroAggs R6 objects — mergeData","text":"","code":"a <- loadAPI(ID = 2001,              measure = 'flow',              period = 900,              type = 'instantaneous',              datapoints = 'range',              from = '2023-06-12 09:00',              to = '2023-06-13 09:00') #> ℹ Compiling parameters for raw download #> ✔ Compiling parameters for raw download [143ms] #>  #> ℹ Downloading raw data #> ✔ Downloading raw data [138ms] #>  #> ℹ Collating metadata #> ✔ Collating metadata [196ms] #>  #> ℹ Exporting data to HydroImport container #> ✔ Exporting data to HydroImport container [33ms] #>   b <- loadAPI(ID = 2002,              measure = 'flow',              period = 900,              type = 'instantaneous',              datapoints = 'range',              from = '2023-06-12 09:00',              to = '2023-07-12 09:00') #> ℹ Compiling parameters for raw download #> ✔ Compiling parameters for raw download [161ms] #>  #> ℹ Downloading raw data #> ✔ Downloading raw data [288ms] #>  #> ℹ Collating metadata #> ✔ Collating metadata [183ms] #>  #> ℹ Exporting data to HydroImport container #> ✔ Exporting data to HydroImport container [26ms] #>   c <- loadAPI(ID = 2004,              measure = 'flow',              period = 900,              type = 'instantaneous',              datapoints = 'range',              from = '2023-06-13 09:00',              to = '2023-07-12 09:00') #> ℹ Compiling parameters for raw download #> ✔ Compiling parameters for raw download [122ms] #>  #> ℹ Downloading raw data #> ✔ Downloading raw data [282ms] #>  #> ℹ Collating metadata #> ✔ Collating metadata [301ms] #>  #> ℹ Exporting data to HydroImport container #> ✔ Exporting data to HydroImport container [25ms] #>   d <- loadAPI(ID = 2001,              measure = 'level',              period = 900,              type = 'instantaneous',              datapoints = 'range',              from = '2023-06-12 09:00',              to = '2023-07-12 09:00') #> ℹ Compiling parameters for raw download #> ✔ Compiling parameters for raw download [152ms] #>  #> ℹ Downloading raw data #> ✔ Downloading raw data [270ms] #>  #> ℹ Collating metadata #> ✔ Collating metadata [185ms] #>  #> ℹ Exporting data to HydroImport container #> ✔ Exporting data to HydroImport container [27ms] #>   z <- mergeData(a, b, c, d, metadata = FALSE) #> Warning: Different parametrs will be collated, this could lead to problems in other analyses z #>                  dateTime a_value b_value c_value d_value #>    1: 2023-06-12 00:00:00    13.6    9.23      NA   0.305 #>    2: 2023-06-12 00:15:00    14.1    9.23      NA   0.309 #>    3: 2023-06-12 00:30:00    14.0    9.23      NA   0.311 #>    4: 2023-06-12 00:45:00    14.4    9.28      NA   0.314 #>    5: 2023-06-12 01:00:00    14.6    9.33      NA   0.316 #>   ---                                                     #> 2876: 2023-07-11 22:45:00      NA   10.60    5.79   0.328 #> 2877: 2023-07-11 23:00:00      NA   10.60    5.91   0.326 #> 2878: 2023-07-11 23:15:00      NA   10.60    6.00   0.325 #> 2879: 2023-07-11 23:30:00      NA   10.60    6.00   0.324 #> 2880: 2023-07-11 23:45:00      NA   10.60    5.95   0.323"},{"path":"https://jonpayneea.github.io/riskyData/reference/monthlyAgg.html","id":null,"dir":"Reference","previous_headings":"","what":"monthlyAgg — monthlyAgg","title":"monthlyAgg — monthlyAgg","text":"Aggregates sub monthly time series monthly resolution, aggregations carried calendar day rolling time period.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/monthlyAgg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"monthlyAgg — monthlyAgg","text":"","code":"monthlyAgg(x, method = \"mean\", ...)  # S3 method for data.table monthlyAgg(x, method = \"mean\", ...)  # S3 method for HydroImport monthlyAgg(x, method = \"mean\", ...)"},{"path":"https://jonpayneea.github.io/riskyData/reference/monthlyAgg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"monthlyAgg — monthlyAgg","text":"x Data generated riskyData package method 'mean', 'median', 'max', 'min', 'sum' ... variables required","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/monthlyAgg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"monthlyAgg — monthlyAgg","text":"aggregated dataset taken calendar month, data stored HydroAggs container.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/monthlyAgg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"monthlyAgg — monthlyAgg","text":"","code":"data(bewdley)  ## Monthly minimum flow monthlyAgg(bewdley, method = \"min\") #>      dateTime Monthly_Min #>   1:  2008 10       23.10 #>   2:  2008 11       49.40 #>   3:  2008 12       37.30 #>   4:   2009 1       21.10 #>   5:   2009 2       27.30 #>  ---                      #> 164:   2022 5        9.66 #> 165:   2022 6        8.60 #> 166:   2022 7        8.40 #> 167:   2022 8        7.91 #> 168:   2022 9        7.99"},{"path":"https://jonpayneea.github.io/riskyData/reference/rainSep.html","id":null,"dir":"Reference","previous_headings":"","what":"Rainfall event seperation — rainSep","title":"Rainfall event seperation — rainSep","text":"rainSep() function uses run length encoding find consecutive rainfall periods. avoid brief timesteps rain splitting events, use RcppRoll::roll_sum() can pad event d urations.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rainSep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rainfall event seperation — rainSep","text":"","code":"rainSep(dateTime = NULL, precip = NULL, threshold = 0, minTotal = 0, roll = 0)"},{"path":"https://jonpayneea.github.io/riskyData/reference/rainSep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rainfall event seperation — rainSep","text":"dateTime DateTime variable time series. precip Observed rainfall data. threshold Used tidy averaged radar data low accumulations can recorded, defaults 0mm. minTotal Used help tidy total number events. Sets minimum event total rainfall. roll Number time steps use RcppRoll::roll_sum().","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rainSep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rainfall event seperation — rainSep","text":"Function returns data table event ID, start end times events, total accumulation events","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rainSep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rainfall event seperation — rainSep","text":"","code":"## No accumulation applied, minimum total set to 2mm rainSep(dateTime = chesterton$data$dateTime,       precip = chesterton$data$value,       threshold = 0,       minTotal = 2,       roll = 0) #>       id               start                 end total #>   1:   1 2011-01-07 08:30:00 2011-01-07 10:00:00   6.5 #>   2:   2 2011-01-11 02:15:00 2011-01-11 03:00:00   2.0 #>   3:   3 2011-01-13 20:30:00 2011-01-13 22:15:00   5.0 #>   4:   4 2011-02-19 06:45:00 2011-02-19 08:30:00   4.0 #>   5:   5 2011-02-26 00:30:00 2011-02-26 01:15:00   3.0 #>  ---                                                   #> 861: 861 2022-09-09 14:30:00 2022-09-09 14:45:00   8.4 #> 862: 862 2022-09-09 15:30:00 2022-09-09 16:15:00   6.0 #> 863: 863 2022-09-26 10:00:00 2022-09-26 10:15:00   3.6 #> 864: 864 2022-09-30 14:15:00 2022-09-30 17:00:00   5.8 #> 865: 865 2022-09-30 18:00:00 2022-09-30 19:30:00   3.8  ## 2 hr rolling accumulation rainSep(dateTime = chesterton$data$dateTime,         precip = chesterton$data$value,         threshold = 0,         roll = 8) #>         id               start                 end total #>    1:    1 2011-01-01 11:15:00 2011-01-01 13:00:00   0.5 #>    2:    2 2011-01-05 12:15:00 2011-01-05 15:00:00   1.0 #>    3:    3 2011-01-07 07:30:00 2011-01-07 10:45:00   6.5 #>    4:    4 2011-01-07 16:30:00 2011-01-07 18:30:00   1.5 #>    5:    5 2011-01-08 04:30:00 2011-01-08 06:15:00   0.5 #>   ---                                                    #> 3069: 3069 2022-09-26 17:45:00 2022-09-26 19:45:00   0.6 #> 3070: 3070 2022-09-29 02:15:00 2022-09-29 06:15:00   1.6 #> 3071: 3071 2022-09-30 00:45:00 2022-09-30 02:30:00   0.2 #> 3072: 3072 2022-09-30 13:15:00 2022-09-30 20:15:00   9.6 #> 3073: 3073 2022-09-30 21:45:00 2022-09-30 22:45:00   0.2  ## Window plots plot(chesterton$data$dateTime[1:200000], chesterton$data$value[1:200000],      ylim = rev(range(chesterton$data$value[1:200000], na.rm = TRUE)),      type = 'h', ylab = \"Rainfall (mm)\", xlab = \"Date Time\") dayRain <- rainSep(dateTime = chesterton$data$dateTime[1:200000],                    precip = chesterton$data$value[1:200000],                    threshold = 0,                    minTotal = 4,                    roll = 20) for (i in seq_along(dayRain$id)){   polygon(x = c(dayRain$start[i], dayRain$start[i], dayRain$end[i],                 dayRain$end[i]),           y = c(0, 12, 12, 0),           col = scales::alpha('red', 0.5),           border = NA) } lines(chesterton$data$dateTime[1:200000], chesterton$data$value[1:200000])"},{"path":"https://jonpayneea.github.io/riskyData/reference/rmHY.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove hydrological year from HydroImport and HydroAggs classes — rmHY","title":"Remove hydrological year from HydroImport and HydroAggs classes — rmHY","text":"Remove hydrological year HydroImport HydroAggs classes","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rmHY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove hydrological year from HydroImport and HydroAggs classes — rmHY","text":"","code":"rmHY(x)  # S3 method for data.table rmHY(x)  # S3 method for HydroImport rmHY(x)  # S3 method for HydroAggs rmHY(x)"},{"path":"https://jonpayneea.github.io/riskyData/reference/rmHY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove hydrological year from HydroImport and HydroAggs classes — rmHY","text":"x Raw data data.table format HydroImport HydroAggs classes","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rmHY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove hydrological year from HydroImport and HydroAggs classes — rmHY","text":"hydroYear column removed HydroImport HydroAggs containers public fields obj$data","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rmHY.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove hydrological year from HydroImport and HydroAggs classes — rmHY","text":"","code":"## Do not run # obj$rmHY()"},{"path":"https://jonpayneea.github.io/riskyData/reference/rmHYD.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove hydrological day of year from hydroYear class — rmHYD","title":"Remove hydrological day of year from hydroYear class — rmHYD","text":"Remove hydrological day year hydroYear class","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rmHYD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove hydrological day of year from hydroYear class — rmHYD","text":"","code":"rmHYD(x)  # S3 method for data.table rmHYD(x)  # S3 method for HydroImport rmHYD(x)  # S3 method for HydroAggs rmHYD(x)"},{"path":"https://jonpayneea.github.io/riskyData/reference/rmHYD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove hydrological day of year from hydroYear class — rmHYD","text":"x Raw data data.table format hydroLoad class","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rmHYD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove hydrological day of year from hydroYear class — rmHYD","text":"hydroYearDay column removed HydroImport HydroAggs containers public fields obj$data","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rmHYD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove hydrological day of year from hydroYear class — rmHYD","text":"","code":"## Do not run # obj$rmHYD()"},{"path":"https://jonpayneea.github.io/riskyData/reference/rmVol.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove calculated volume from hydroYear class — rmVol","title":"Remove calculated volume from hydroYear class — rmVol","text":"Remove calculated volume hydroYear class","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rmVol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove calculated volume from hydroYear class — rmVol","text":"","code":"rmVol(x)  # S3 method for data.table rmVol(x)  # S3 method for HydroImport rmVol(x)  # S3 method for HydroAggs rmVol(x)"},{"path":"https://jonpayneea.github.io/riskyData/reference/rmVol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove calculated volume from hydroYear class — rmVol","text":"x Raw data data.table format hydroLoad class","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rmVol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove calculated volume from hydroYear class — rmVol","text":"volume column removed HydroImport HydroAggs containers public fields obj$data","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rmVol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove calculated volume from hydroYear class — rmVol","text":"","code":"## Do not run # obj$rmVol()"},{"path":"https://jonpayneea.github.io/riskyData/reference/rollingAggs.html","id":null,"dir":"Reference","previous_headings":"","what":"rollingAggs — rollingAggs","title":"rollingAggs — rollingAggs","text":"Provides rolling aggregation user defined periods.","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rollingAggs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rollingAggs — rollingAggs","text":"","code":"rollingAggs(x, rolls = NULL, interval = 0.25, method = \"mean\")  # S3 method for data.table rollingAggs(x, rolls = NULL, interval = 0.25, method = \"mean\")"},{"path":"https://jonpayneea.github.io/riskyData/reference/rollingAggs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rollingAggs — rollingAggs","text":"rolls User defined periods aggregation interval Set 0.25 represent 15 minute data, hourly change 1 etc. method 'min', 'max', 'mean', 'median', 'sum' options available dt Input dat R6 object","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rollingAggs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rollingAggs — rollingAggs","text":"dataset containing numerous aggregations roll","code":""},{"path":"https://jonpayneea.github.io/riskyData/reference/rollingAggs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rollingAggs — rollingAggs","text":"","code":"## Do not run # rollingAggs(Buildwas)"}]
